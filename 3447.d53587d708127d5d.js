"use strict";(self.webpackChunkprimeng=self.webpackChunkprimeng||[]).push([[3447],{46544:(b,m,d)=>{d.d(m,{N:()=>y});var c=d(41571);const g=["*"];let y=(()=>{class u{}return u.\u0275fac=function(t){return new(t||u)},u.\u0275cmp=c.Xpm({type:u,selectors:[["app-developmentsection"]],ngContentSelectors:g,decls:4,vars:0,consts:[[1,"flex","align-items-center","line-height-3","bg-primary-600","text-white","p-3","text-lg","border-round","mb-3"],[1,"pi","pi-info-circle","text-lg","text-white","mr-2"]],template:function(t,h){1&t&&(c.F$t(),c.TgZ(0,"div",0),c._UZ(1,"i",1),c._uU(2," Accessibility guide documents the specification of this component based on WCAG guidelines, the implementation is in progress.\n"),c.qZA(),c.Hsn(3))},encapsulation:2}),u})()},63447:(b,m,d)=>{d.r(m),d.d(m,{ChartDemoModule:()=>O});var c=d(36895),g=d(58523),y=d(10359),u=d(84369),i=d(79768),t=d(41571);let h=(()=>{class o{}return o.\u0275fac=function(e){return new(e||o)},o.\u0275mod=t.oAB({type:o}),o.\u0275inj=t.cJS({imports:[c.ez,y.Bz,i.a,g.S,u.V,u.V]}),o})();var s=d(54802);let f=(()=>{class o{constructor(){this.code={typescript:'\nnpm install chart.js --save\n\n"scripts": [\n    "../node_modules/chart.js/dist/chart.js",\n    //..others\n],'}}}return o.\u0275fac=function(e){return new(e||o)},o.\u0275cmp=t.Xpm({type:o,selectors:[["chartjs-doc"]],inputs:{id:"id",title:"title"},decls:5,vars:4,consts:[[3,"title","id"],[3,"code","hideToggleCode"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"To begin with, first you must install the charts.js package using npm and then include it in your project. An example with CLI would be;"),t.qZA()(),t._UZ(4,"app-code",1),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(3),t.Q6J("code",a.code)("hideToggleCode",!0))},dependencies:[i.h,s.c],encapsulation:2}),o})(),C=(()=>{class o{constructor(){this.code={typescript:"import { ChartModule } from 'primeng/chart';"}}}return o.\u0275fac=function(e){return new(e||o)},o.\u0275cmp=t.Xpm({type:o,selectors:[["import-doc"]],inputs:{id:"id",title:"title"},decls:3,vars:4,consts:[[3,"title","id"],[3,"code","hideToggleCode"]],template:function(e,a){1&e&&(t.TgZ(0,"section"),t._UZ(1,"app-docsectiontext",0)(2,"app-code",1),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(1),t.Q6J("code",a.code)("hideToggleCode",!0))},dependencies:[i.h,s.c],encapsulation:2}),o})();var p=d(26140);let Z=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="bar" [data]="basicData" [options]="basicOptions"></p-chart>',html:'\n<div class="card">\n    <p-chart type="bar" [data]="basicData" [options]="basicOptions"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-basic-demo',\n    templateUrl: './chart-basic-demo.html'\n})\nexport class ChartBasicDemo implements OnInit {\n    basicData: any;\n\n    basicOptions: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n\n        this.basicData = {\n            labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n            datasets: [\n                {\n                    label: 'Sales',\n                    data: [540, 325, 702, 620],\n                    backgroundColor: ['rgba(255, 159, 64, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(153, 102, 255, 0.2)'],\n                    borderColor: ['rgb(255, 159, 64)', 'rgb(75, 192, 192)', 'rgb(54, 162, 235)', 'rgb(153, 102, 255)'],\n                    borderWidth: 1\n                }\n            ]\n        };\n\n        this.basicOptions = {\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                },\n                x: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.basicData={labels:["Q1","Q2","Q3","Q4"],datasets:[{label:"Sales",data:[540,325,702,620],backgroundColor:["rgba(255, 159, 64, 0.2)","rgba(75, 192, 192, 0.2)","rgba(54, 162, 235, 0.2)","rgba(153, 102, 255, 0.2)"],borderColor:["rgb(255, 159, 64)","rgb(75, 192, 192)","rgb(54, 162, 235)","rgb(153, 102, 255)"],borderWidth:1}]},this.basicOptions={plugins:{legend:{labels:{color:a}}},scales:{y:{beginAtZero:!0,ticks:{color:l},grid:{color:n,drawBorder:!1}},x:{ticks:{color:l},grid:{color:n,drawBorder:!1}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-basic-demo"]],inputs:{id:"id",title:"title"},decls:43,vars:5,consts:[[3,"title","id"],[1,"card"],["type","bar",3,"data","options"],["selector","chart-basic-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3," A chart is configured with 3 properties; "),t.TgZ(4,"i"),t._uU(5,"type"),t.qZA(),t._uU(6,", "),t.TgZ(7,"i"),t._uU(8,"data"),t.qZA(),t._uU(9," and "),t.TgZ(10,"i"),t._uU(11,"options"),t.qZA(),t._uU(12,". Chart type is defined using the "),t.TgZ(13,"i"),t._uU(14,"type"),t.qZA(),t._uU(15," property that accepts "),t.TgZ(16,"i"),t._uU(17,"pie"),t.qZA(),t._uU(18,", "),t.TgZ(19,"i"),t._uU(20,"doughtnut"),t.qZA(),t._uU(21,", "),t.TgZ(22,"i"),t._uU(23,"line"),t.qZA(),t._uU(24,", "),t.TgZ(25,"i"),t._uU(26,"bar"),t.qZA(),t._uU(27,", "),t.TgZ(28,"i"),t._uU(29,"radar"),t.qZA(),t._uU(30," and "),t.TgZ(31,"i"),t._uU(32,"polarArea"),t.qZA(),t._uU(33," as a value. The "),t.TgZ(34,"i"),t._uU(35,"data"),t.qZA(),t._uU(36," defines datasets represented with the chart and the "),t.TgZ(37,"i"),t._uU(38,"options"),t.qZA(),t._uU(39," provide numerous customization options to customize the presentation. "),t.qZA()(),t.TgZ(40,"div",1),t._UZ(41,"p-chart",2),t.qZA(),t._UZ(42,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(40),t.Q6J("data",a.basicData)("options",a.basicOptions),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),S=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="pie" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card flex justify-content-center">\n    <p-chart type="pie" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-pie-demo',\n    templateUrl: './chart-pie-demo.html'\n})\nexport class ChartPieDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n\n        this.data = {\n            labels: ['A', 'B', 'C'],\n            datasets: [\n                {\n                    data: [540, 325, 702],\n                    backgroundColor: [documentStyle.getPropertyValue('--blue-500'), documentStyle.getPropertyValue('--yellow-500'), documentStyle.getPropertyValue('--green-500')],\n                    hoverBackgroundColor: [documentStyle.getPropertyValue('--blue-400'), documentStyle.getPropertyValue('--yellow-400'), documentStyle.getPropertyValue('--green-400')]\n                }\n            ]\n        };\n\n        this.options = {\n            plugins: {\n                legend: {\n                    labels: {\n                        usePointStyle: true,\n                        color: textColor\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color");this.data={labels:["A","B","C"],datasets:[{data:[540,325,702],backgroundColor:[e.getPropertyValue("--blue-500"),e.getPropertyValue("--yellow-500"),e.getPropertyValue("--green-500")],hoverBackgroundColor:[e.getPropertyValue("--blue-400"),e.getPropertyValue("--yellow-400"),e.getPropertyValue("--green-400")]}]},this.options={plugins:{legend:{labels:{usePointStyle:!0,color:a}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-pie-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["type","pie",3,"data","options"],["selector","chart-pie-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"A pie chart is a circular statistical graphic which is divided into slices to illustrate numerical proportion."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),A=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="doughnut" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card flex justify-content-center">\n    <p-chart type="doughnut" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-doughnut-demo',\n    templateUrl: './chart-doughnut-demo.html'\n})\nexport class ChartDoughnutDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n\n        this.data = {\n            labels: ['A', 'B', 'C'],\n            datasets: [\n                {\n                    data: [300, 50, 100],\n                    backgroundColor: [documentStyle.getPropertyValue('--blue-500'), documentStyle.getPropertyValue('--yellow-500'), documentStyle.getPropertyValue('--green-500')],\n                    hoverBackgroundColor: [documentStyle.getPropertyValue('--blue-400'), documentStyle.getPropertyValue('--yellow-400'), documentStyle.getPropertyValue('--green-400')]\n                }\n            ]\n        };\n\n\n        this.options = {\n            cutout: '60%',\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color");this.data={labels:["A","B","C"],datasets:[{data:[300,50,100],backgroundColor:[e.getPropertyValue("--blue-500"),e.getPropertyValue("--yellow-500"),e.getPropertyValue("--green-500")],hoverBackgroundColor:[e.getPropertyValue("--blue-400"),e.getPropertyValue("--yellow-400"),e.getPropertyValue("--green-400")]}]},this.options={cutout:"60%",plugins:{legend:{labels:{color:a}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-doughnut-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["type","doughnut",3,"data","options"],["selector","chart-doughnut-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"A doughnut chart is a variant of the pie chart, with a blank center allowing for additional information about the data as a whole to be included."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),x=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="line" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="line" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-combo-demo',\n    templateUrl: './chart-combo-demo.html'\n})\nexport class ChartComboDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n        \n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    type: 'line',\n                    label: 'Dataset 1',\n                    borderColor: documentStyle.getPropertyValue('--blue-500'),\n                    borderWidth: 2,\n                    fill: false,\n                    tension: 0.4,\n                    data: [50, 25, 12, 48, 56, 76, 42]\n                },\n                {\n                    type: 'bar',\n                    label: 'Dataset 2',\n                    backgroundColor: documentStyle.getPropertyValue('--green-500'),\n                    data: [21, 84, 24, 75, 37, 65, 34],\n                    borderColor: 'white',\n                    borderWidth: 2\n                },\n                {\n                    type: 'bar',\n                    label: 'Dataset 3',\n                    backgroundColor: documentStyle.getPropertyValue('--orange-500'),\n                    data: [41, 52, 24, 74, 23, 21, 32]\n                }\n            ]\n        };\n        \n        this.options = {\n            maintainAspectRatio: false,\n            aspectRatio: 0.6,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder\n                    }\n                },\n                y: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{type:"line",label:"Dataset 1",borderColor:e.getPropertyValue("--blue-500"),borderWidth:2,fill:!1,tension:.4,data:[50,25,12,48,56,76,42]},{type:"bar",label:"Dataset 2",backgroundColor:e.getPropertyValue("--green-500"),data:[21,84,24,75,37,65,34],borderColor:"white",borderWidth:2},{type:"bar",label:"Dataset 3",backgroundColor:e.getPropertyValue("--orange-500"),data:[41,52,24,74,23,21,32]}]},this.options={maintainAspectRatio:!1,aspectRatio:.6,plugins:{legend:{labels:{color:a}}},scales:{x:{ticks:{color:l},grid:{color:n}},y:{ticks:{color:l},grid:{color:n}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-combo-demo"]],inputs:{id:"id",title:"title"},decls:10,vars:5,consts:[[3,"title","id"],[1,"card"],["type","line",3,"data","options"],["selector","chart-combo-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"Different chart types can be combined in the same graph usign the "),t.TgZ(4,"i"),t._uU(5,"type"),t.qZA(),t._uU(6," option of a dataset."),t.qZA()(),t.TgZ(7,"div",1),t._UZ(8,"p-chart",2),t.qZA(),t._UZ(9,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(7),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),P=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="bar" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="bar" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-horizontal-bar-demo',\n    templateUrl: './chart-horizontal-bar-demo.html'\n})\nexport class ChartHorizontalBarDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n\n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    label: 'My First dataset',\n                    backgroundColor: documentStyle.getPropertyValue('--blue-500'),\n                    borderColor: documentStyle.getPropertyValue('--blue-500'),\n                    data: [65, 59, 80, 81, 56, 55, 40]\n                },\n                {\n                    label: 'My Second dataset',\n                    backgroundColor: documentStyle.getPropertyValue('--pink-500'),\n                    borderColor: documentStyle.getPropertyValue('--pink-500'),\n                    data: [28, 48, 40, 19, 86, 27, 90]\n                }\n            ]\n        };\n\n        this.options = {\n            indexAxis: 'y',\n            maintainAspectRatio: false,\n            aspectRatio: 0.8,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        color: textColorSecondary,\n                        font: {\n                            weight: 500\n                        }\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                },\n                y: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{label:"My First dataset",backgroundColor:e.getPropertyValue("--blue-500"),borderColor:e.getPropertyValue("--blue-500"),data:[65,59,80,81,56,55,40]},{label:"My Second dataset",backgroundColor:e.getPropertyValue("--pink-500"),borderColor:e.getPropertyValue("--pink-500"),data:[28,48,40,19,86,27,90]}]},this.options={indexAxis:"y",maintainAspectRatio:!1,aspectRatio:.8,plugins:{legend:{labels:{color:a}}},scales:{x:{ticks:{color:l,font:{weight:500}},grid:{color:n,drawBorder:!1}},y:{ticks:{color:l},grid:{color:n,drawBorder:!1}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-horizontal-bar-demo"]],inputs:{id:"id",title:"title"},decls:13,vars:5,consts:[[3,"title","id"],[1,"card"],["type","bar",3,"data","options"],["selector","chart-horizontal-bar-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"A bar chart is rendered horizontally when "),t.TgZ(4,"i"),t._uU(5,"indexAxis"),t.qZA(),t._uU(6," option is set as "),t.TgZ(7,"i"),t._uU(8,"y"),t.qZA(),t._uU(9,"."),t.qZA()(),t.TgZ(10,"div",1),t._UZ(11,"p-chart",2),t.qZA(),t._UZ(12,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(10),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),D=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="line" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="line" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-line-demo',\n    templateUrl: './chart-line-demo.html'\n})\nexport class ChartLineDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n\n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    label: 'First Dataset',\n                    data: [65, 59, 80, 81, 56, 55, 40],\n                    fill: false,\n                    borderColor: documentStyle.getPropertyValue('--blue-500'),\n                    tension: 0.4\n                },\n                {\n                    label: 'Second Dataset',\n                    data: [28, 48, 40, 19, 86, 27, 90],\n                    fill: false,\n                    borderColor: documentStyle.getPropertyValue('--pink-500'),\n                    tension: 0.4\n                }\n            ]\n        };\n\n        this.options = {\n            maintainAspectRatio: false,\n            aspectRatio: 0.6,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                },\n                y: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{label:"First Dataset",data:[65,59,80,81,56,55,40],fill:!1,borderColor:e.getPropertyValue("--blue-500"),tension:.4},{label:"Second Dataset",data:[28,48,40,19,86,27,90],fill:!1,borderColor:e.getPropertyValue("--pink-500"),tension:.4}]},this.options={maintainAspectRatio:!1,aspectRatio:.6,plugins:{legend:{labels:{color:a}}},scales:{x:{ticks:{color:l},grid:{color:n,drawBorder:!1}},y:{ticks:{color:l},grid:{color:n,drawBorder:!1}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-line-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card"],["type","line",3,"data","options"],["selector","chart-line-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"A line chart or line graph is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),V=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="line" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="line" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-multi-axis-demo',\n    templateUrl: './chart-multi-axis-demo.html'\n})\nexport class ChartMultiAxisDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n        \n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    label: 'Dataset 1',\n                    fill: false,\n                    borderColor: documentStyle.getPropertyValue('--blue-500'),\n                    yAxisID: 'y',\n                    tension: 0.4,\n                    data: [65, 59, 80, 81, 56, 55, 10]\n                },\n                {\n                    label: 'Dataset 2',\n                    fill: false,\n                    borderColor: documentStyle.getPropertyValue('--green-500'),\n                    yAxisID: 'y1',\n                    tension: 0.4,\n                    data: [28, 48, 40, 19, 86, 27, 90]\n                }\n            ]\n        };\n        \n        this.options = {\n            stacked: false,\n            maintainAspectRatio: false,\n            aspectRatio: 0.6,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder\n                    }\n                },\n                y: {\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder\n                    }\n                },\n                y1: {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        drawOnChartArea: false,\n                        color: surfaceBorder\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{label:"Dataset 1",fill:!1,borderColor:e.getPropertyValue("--blue-500"),yAxisID:"y",tension:.4,data:[65,59,80,81,56,55,10]},{label:"Dataset 2",fill:!1,borderColor:e.getPropertyValue("--green-500"),yAxisID:"y1",tension:.4,data:[28,48,40,19,86,27,90]}]},this.options={stacked:!1,maintainAspectRatio:!1,aspectRatio:.6,plugins:{legend:{labels:{color:a}}},scales:{x:{ticks:{color:l},grid:{color:n}},y:{type:"linear",display:!0,position:"left",ticks:{color:l},grid:{color:n}},y1:{type:"linear",display:!0,position:"right",ticks:{color:l},grid:{drawOnChartArea:!1,color:n}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-multi-axis-demo"]],inputs:{id:"id",title:"title"},decls:10,vars:5,consts:[[3,"title","id"],[1,"card"],["type","line",3,"data","options"],["selector","chart-multi-axis-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"Multiple axes can be added using the "),t.TgZ(4,"i"),t._uU(5,"scales"),t.qZA(),t._uU(6," option."),t.qZA()(),t.TgZ(7,"div",1),t._UZ(8,"p-chart",2),t.qZA(),t._UZ(9,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(7),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),U=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="polarArea" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card flex justify-content-center">\n    <p-chart type="polarArea" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-polar-area-demo',\n    templateUrl: './chart-polar-area-demo.html'\n})\nexport class ChartPolarAreaDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n        \n        this.data = {\n            datasets: [\n                {\n                    data: [11, 16, 7, 3, 14],\n                    backgroundColor: [\n                        documentStyle.getPropertyValue('--red-500'),\n                        documentStyle.getPropertyValue('--green-500'),\n                        documentStyle.getPropertyValue('--yellow-500'),\n                        documentStyle.getPropertyValue('--bluegray-500'),\n                        documentStyle.getPropertyValue('--blue-500')\n                    ],\n                    label: 'My dataset'\n                }\n            ],\n            labels: ['Red', 'Green', 'Yellow', 'Grey', 'Blue']\n        };\n        \n        this.options = {\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                r: {\n                    grid: {\n                        color: surfaceBorder\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--surface-border");this.data={datasets:[{data:[11,16,7,3,14],backgroundColor:[e.getPropertyValue("--red-500"),e.getPropertyValue("--green-500"),e.getPropertyValue("--yellow-500"),e.getPropertyValue("--bluegray-500"),e.getPropertyValue("--blue-500")],label:"My dataset"}],labels:["Red","Green","Yellow","Grey","Blue"]},this.options={plugins:{legend:{labels:{color:a}}},scales:{r:{grid:{color:l}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-polar-area-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["type","polarArea",3,"data","options"],["selector","chart-polar-area-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"Polar area charts are similar to pie charts, but each segment has the same angle - the radius of the segment differs depending on the value."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),_=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="radar" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card flex justify-content-center">\n    <p-chart type="radar" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-radar-demo',\n    templateUrl: './chart-radar-demo.html'\n})\nexport class ChartRadarDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        \n        this.data = {\n            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],\n            datasets: [\n                {\n                    label: 'My First dataset',\n                    borderColor: documentStyle.getPropertyValue('--bluegray-400'),\n                    pointBackgroundColor: documentStyle.getPropertyValue('--bluegray-400'),\n                    pointBorderColor: documentStyle.getPropertyValue('--bluegray-400'),\n                    pointHoverBackgroundColor: textColor,\n                    pointHoverBorderColor: documentStyle.getPropertyValue('--bluegray-400'),\n                    data: [65, 59, 90, 81, 56, 55, 40]\n                },\n                {\n                    label: 'My Second dataset',\n                    borderColor: documentStyle.getPropertyValue('--pink-400'),\n                    pointBackgroundColor: documentStyle.getPropertyValue('--pink-400'),\n                    pointBorderColor: documentStyle.getPropertyValue('--pink-400'),\n                    pointHoverBackgroundColor: textColor,\n                    pointHoverBorderColor: documentStyle.getPropertyValue('--pink-400'),\n                    data: [28, 48, 40, 19, 96, 27, 100]\n                }\n            ]\n        };\n        \n        this.options = {\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                r: {\n                    grid: {\n                        color: textColorSecondary\n                    },\n                    pointLabels: {\n                        color: textColorSecondary\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary");this.data={labels:["Eating","Drinking","Sleeping","Designing","Coding","Cycling","Running"],datasets:[{label:"My First dataset",borderColor:e.getPropertyValue("--bluegray-400"),pointBackgroundColor:e.getPropertyValue("--bluegray-400"),pointBorderColor:e.getPropertyValue("--bluegray-400"),pointHoverBackgroundColor:a,pointHoverBorderColor:e.getPropertyValue("--bluegray-400"),data:[65,59,90,81,56,55,40]},{label:"My Second dataset",borderColor:e.getPropertyValue("--pink-400"),pointBackgroundColor:e.getPropertyValue("--pink-400"),pointBorderColor:e.getPropertyValue("--pink-400"),pointHoverBackgroundColor:a,pointHoverBorderColor:e.getPropertyValue("--pink-400"),data:[28,48,40,19,96,27,100]}]},this.options={plugins:{legend:{labels:{color:a}}},scales:{r:{grid:{color:l},pointLabels:{color:l}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-radar-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["type","radar",3,"data","options"],["selector","chart-radar-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"A radar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),T=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="bar" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="bar" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-stacked-bar-demo',\n    templateUrl: './chart-stacked-bar-demo.html'\n})\nexport class ChartStackedBarDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n\n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    type: 'bar',\n                    label: 'Dataset 1',\n                    backgroundColor: documentStyle.getPropertyValue('--blue-500'),\n                    data: [50, 25, 12, 48, 90, 76, 42]\n                },\n                {\n                    type: 'bar',\n                    label: 'Dataset 2',\n                    backgroundColor: documentStyle.getPropertyValue('--green-500'),\n                    data: [21, 84, 24, 75, 37, 65, 34]\n                },\n                {\n                    type: 'bar',\n                    label: 'Dataset 3',\n                    backgroundColor: documentStyle.getPropertyValue('--yellow-500'),\n                    data: [41, 52, 24, 74, 23, 21, 32]\n                }\n            ]\n        };\n\n        this.options = {\n            maintainAspectRatio: false,\n            aspectRatio: 0.8,\n            plugins: {\n                tooltips: {\n                    mode: 'index',\n                    intersect: false\n                },\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    stacked: true,\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                },\n                y: {\n                    stacked: true,\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{type:"bar",label:"Dataset 1",backgroundColor:e.getPropertyValue("--blue-500"),data:[50,25,12,48,90,76,42]},{type:"bar",label:"Dataset 2",backgroundColor:e.getPropertyValue("--green-500"),data:[21,84,24,75,37,65,34]},{type:"bar",label:"Dataset 3",backgroundColor:e.getPropertyValue("--yellow-500"),data:[41,52,24,74,23,21,32]}]},this.options={maintainAspectRatio:!1,aspectRatio:.8,plugins:{tooltips:{mode:"index",intersect:!1},legend:{labels:{color:a}}},scales:{x:{stacked:!0,ticks:{color:l},grid:{color:n,drawBorder:!1}},y:{stacked:!0,ticks:{color:l},grid:{color:n,drawBorder:!1}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-stacked-bar-demo"]],inputs:{id:"id",title:"title"},decls:10,vars:5,consts:[[3,"title","id"],[1,"card"],["type","bar",3,"data","options"],["selector","chart-stacked-bar-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"Bars can be stacked on top of each other when "),t.TgZ(4,"i"),t._uU(5,"stacked"),t.qZA(),t._uU(6," option of a scale is enabled."),t.qZA()(),t.TgZ(7,"div",1),t._UZ(8,"p-chart",2),t.qZA(),t._UZ(9,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(7),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),k=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="bar" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="bar" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-vertical-bar-demo',\n    templateUrl: './chart-vertical-bar-demo.html'\n})\nexport class ChartVerticalBarDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n        \n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    label: 'My First dataset',\n                    backgroundColor: documentStyle.getPropertyValue('--blue-500'),\n                    borderColor: documentStyle.getPropertyValue('--blue-500'),\n                    data: [65, 59, 80, 81, 56, 55, 40]\n                },\n                {\n                    label: 'My Second dataset',\n                    backgroundColor: documentStyle.getPropertyValue('--pink-500'),\n                    borderColor: documentStyle.getPropertyValue('--pink-500'),\n                    data: [28, 48, 40, 19, 86, 27, 90]\n                }\n            ]\n        };\n\n        this.options = {\n            maintainAspectRatio: false,\n            aspectRatio: 0.8,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        color: textColorSecondary,\n                        font: {\n                            weight: 500\n                        }\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                },\n                y: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder,\n                        drawBorder: false\n                    }\n                }\n\n            }\n        };\n    }\n}",module:"\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ChartModule } from 'primeng/chart';\nimport { ChartDemo } from './chartdemo';\n\n@NgModule({\n    imports: [CommonModule, ChartModule],\n    declarations: [ChartDemo]\n})\nexport class ChartDemoModule {}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{label:"My First dataset",backgroundColor:e.getPropertyValue("--blue-500"),borderColor:e.getPropertyValue("--blue-500"),data:[65,59,80,81,56,55,40]},{label:"My Second dataset",backgroundColor:e.getPropertyValue("--pink-500"),borderColor:e.getPropertyValue("--pink-500"),data:[28,48,40,19,86,27,90]}]},this.options={maintainAspectRatio:!1,aspectRatio:.8,plugins:{legend:{labels:{color:a}}},scales:{x:{ticks:{color:l,font:{weight:500}},grid:{color:n,drawBorder:!1}},y:{ticks:{color:l},grid:{color:n,drawBorder:!1}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-vertical-bar-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card"],["type","bar",3,"data","options"],["selector","chart-vertical-bar-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"A bar chart or bar graph is a chart that presents grouped data with rectangular bars with lengths proportional to the values that they represent."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),v=(()=>{class o{constructor(e){this.platformId=e,this.code={basic:'\n<p-chart type="line" [data]="data" [options]="options"></p-chart>',html:'\n<div class="card">\n    <p-chart type="line" [data]="data" [options]="options"></p-chart>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'chart-line-style-demo',\n    templateUrl: './chart-line-style-demo.html'\n})\nexport class ChartLineStyleDemo implements OnInit {\n    data: any;\n\n    options: any;\n\n    ngOnInit() {\n        const documentStyle = getComputedStyle(document.documentElement);\n        const textColor = documentStyle.getPropertyValue('--text-color');\n        const textColorSecondary = documentStyle.getPropertyValue('--text-color-secondary');\n        const surfaceBorder = documentStyle.getPropertyValue('--surface-border');\n        \n        this.data = {\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            datasets: [\n                {\n                    label: 'First Dataset',\n                    data: [65, 59, 80, 81, 56, 55, 40],\n                    fill: false,\n                    tension: 0.4,\n                    borderColor: documentStyle.getPropertyValue('--blue-500')\n                },\n                {\n                    label: 'Second Dataset',\n                    data: [28, 48, 40, 19, 86, 27, 90],\n                    fill: false,\n                    borderDash: [5, 5],\n                    tension: 0.4,\n                    borderColor: documentStyle.getPropertyValue('--teal-500')\n                },\n                {\n                    label: 'Third Dataset',\n                    data: [12, 51, 62, 33, 21, 62, 45],\n                    fill: true,\n                    borderColor: documentStyle.getPropertyValue('--orange-500'),\n                    tension: 0.4,\n                    backgroundColor: 'rgba(255,167,38,0.2)'\n                }\n            ]\n        };\n        \n        this.options = {\n            maintainAspectRatio: false,\n            aspectRatio: 0.6,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: textColor\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder\n                    }\n                },\n                y: {\n                    ticks: {\n                        color: textColorSecondary\n                    },\n                    grid: {\n                        color: surfaceBorder\n                    }\n                }\n            }\n        };\n    }\n}"}}ngOnInit(){if((0,c.NF)(this.platformId)){const e=getComputedStyle(document.documentElement),a=e.getPropertyValue("--text-color"),l=e.getPropertyValue("--text-color-secondary"),n=e.getPropertyValue("--surface-border");this.data={labels:["January","February","March","April","May","June","July"],datasets:[{label:"First Dataset",data:[65,59,80,81,56,55,40],fill:!1,tension:.4,borderColor:e.getPropertyValue("--blue-500")},{label:"Second Dataset",data:[28,48,40,19,86,27,90],fill:!1,borderDash:[5,5],tension:.4,borderColor:e.getPropertyValue("--teal-500")},{label:"Third Dataset",data:[12,51,62,33,21,62,45],fill:!0,borderColor:e.getPropertyValue("--orange-500"),tension:.4,backgroundColor:"rgba(255,167,38,0.2)"}]},this.options={maintainAspectRatio:!1,aspectRatio:.6,plugins:{legend:{labels:{color:a}}},scales:{x:{ticks:{color:l},grid:{color:n}},y:{ticks:{color:l},grid:{color:n}}}}}}}return o.\u0275fac=function(e){return new(e||o)(t.Y36(t.Lbi))},o.\u0275cmp=t.Xpm({type:o,selectors:[["chart-line-style-demo"]],inputs:{id:"id",title:"title"},decls:7,vars:5,consts:[[3,"title","id"],[1,"card"],["type","line",3,"data","options"],["selector","chart-line-style-demo",3,"code"]],template:function(e,a){1&e&&(t.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),t._uU(3,"Various styles of a line series can be customized to display customizations like an area chart."),t.qZA()(),t.TgZ(4,"div",1),t._UZ(5,"p-chart",2),t.qZA(),t._UZ(6,"app-code",3),t.qZA()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id),t.xp6(4),t.Q6J("data",a.data)("options",a.options),t.xp6(1),t.Q6J("code",a.code))},dependencies:[i.h,p.C,s.c],encapsulation:2}),o})(),B=(()=>{class o{}return o.\u0275fac=function(e){return new(e||o)},o.\u0275cmp=t.Xpm({type:o,selectors:[["props-doc"]],inputs:{id:"id",title:"title"},decls:87,vars:2,consts:[[3,"title","id"],[1,"doc-tablewrapper"],[1,"doc-table"]],template:function(e,a){1&e&&(t.TgZ(0,"section"),t._UZ(1,"app-docsectiontext",0),t.TgZ(2,"div",1)(3,"table",2)(4,"thead")(5,"tr")(6,"th"),t._uU(7,"Name"),t.qZA(),t.TgZ(8,"th"),t._uU(9,"Type"),t.qZA(),t.TgZ(10,"th"),t._uU(11,"Default"),t.qZA(),t.TgZ(12,"th"),t._uU(13,"Description"),t.qZA()()(),t.TgZ(14,"tbody")(15,"tr")(16,"td"),t._uU(17,"type"),t.qZA(),t.TgZ(18,"td"),t._uU(19,"string"),t.qZA(),t.TgZ(20,"td"),t._uU(21,"null"),t.qZA(),t.TgZ(22,"td"),t._uU(23,"Type of the chart."),t.qZA()(),t.TgZ(24,"tr")(25,"td"),t._uU(26,"data"),t.qZA(),t.TgZ(27,"td"),t._uU(28,"any"),t.qZA(),t.TgZ(29,"td"),t._uU(30,"null"),t.qZA(),t.TgZ(31,"td"),t._uU(32,"Data to display."),t.qZA()(),t.TgZ(33,"tr")(34,"td"),t._uU(35,"options"),t.qZA(),t.TgZ(36,"td"),t._uU(37,"any"),t.qZA(),t.TgZ(38,"td"),t._uU(39,"null"),t.qZA(),t.TgZ(40,"td"),t._uU(41,"Options to customize the chart."),t.qZA()(),t.TgZ(42,"tr")(43,"td"),t._uU(44,"plugins"),t.qZA(),t.TgZ(45,"td"),t._uU(46,"any[]"),t.qZA(),t.TgZ(47,"td"),t._uU(48,"null"),t.qZA(),t.TgZ(49,"td"),t._uU(50,"Array of per-chart plugins to customize the chart behaviour."),t.qZA()(),t.TgZ(51,"tr")(52,"td"),t._uU(53,"width"),t.qZA(),t.TgZ(54,"td"),t._uU(55,"string"),t.qZA(),t.TgZ(56,"td"),t._uU(57,"null"),t.qZA(),t.TgZ(58,"td"),t._uU(59,"Width of the chart."),t.qZA()(),t.TgZ(60,"tr")(61,"td"),t._uU(62,"height"),t.qZA(),t.TgZ(63,"td"),t._uU(64,"string"),t.qZA(),t.TgZ(65,"td"),t._uU(66,"null"),t.qZA(),t.TgZ(67,"td"),t._uU(68,"Height of the chart."),t.qZA()(),t.TgZ(69,"tr")(70,"td"),t._uU(71,"responsive"),t.qZA(),t.TgZ(72,"td"),t._uU(73,"boolean"),t.qZA(),t.TgZ(74,"td"),t._uU(75,"true"),t.qZA(),t.TgZ(76,"td"),t._uU(77,"Whether the chart is redrawn on screen size change."),t.qZA()(),t.TgZ(78,"tr")(79,"td"),t._uU(80,"onDataSelect"),t.qZA(),t.TgZ(81,"td"),t._uU(82,"function"),t.qZA(),t.TgZ(83,"td"),t._uU(84,"null"),t.qZA(),t.TgZ(85,"td"),t._uU(86,"Callback to execute when an element on chart is clicked."),t.qZA()()()()()()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id))},dependencies:[s.c],encapsulation:2}),o})(),q=(()=>{class o{}return o.\u0275fac=function(e){return new(e||o)},o.\u0275cmp=t.Xpm({type:o,selectors:[["methods-doc"]],inputs:{id:"id",title:"title"},decls:34,vars:2,consts:[[3,"title","id"],[1,"doc-tablewrapper"],[1,"doc-table"]],template:function(e,a){1&e&&(t.TgZ(0,"section"),t._UZ(1,"app-docsectiontext",0),t.TgZ(2,"div",1)(3,"table",2)(4,"thead")(5,"tr")(6,"th"),t._uU(7,"Name"),t.qZA(),t.TgZ(8,"th"),t._uU(9,"Parameters"),t.qZA(),t.TgZ(10,"th"),t._uU(11,"Description"),t.qZA()()(),t.TgZ(12,"tbody")(13,"tr")(14,"td"),t._uU(15,"refresh"),t.qZA(),t.TgZ(16,"td"),t._uU(17,"-"),t.qZA(),t.TgZ(18,"td"),t._uU(19,"Redraws the graph with new data."),t.qZA()(),t.TgZ(20,"tr")(21,"td"),t._uU(22,"reinit"),t.qZA(),t.TgZ(23,"td"),t._uU(24,"-"),t.qZA(),t.TgZ(25,"td"),t._uU(26,"Destroys the graph first and then creates it again."),t.qZA()(),t.TgZ(27,"tr")(28,"td"),t._uU(29,"generateLegend"),t.qZA(),t.TgZ(30,"td"),t._uU(31,"-"),t.qZA(),t.TgZ(32,"td"),t._uU(33,"Returns an HTML string of a legend for that chart. The legend is generated from the legendCallback in the options."),t.qZA()()()()()()),2&e&&(t.xp6(1),t.Q6J("title",a.title)("id",a.id))},dependencies:[s.c],encapsulation:2}),o})();var J=d(46544);let w=(()=>{class o{constructor(){this.code={html:"<p-chart \n    type=\"line\" \n    [data]=\"data\" [\n    canvasProps]=\"{'role': 'img', 'aria-label': 'Data'}\"\n></p-chart>"}}}return o.\u0275fac=function(e){return new(e||o)},o.\u0275cmp=t.Xpm({type:o,selectors:[["accessibility-doc"]],inputs:{id:"id",title:"title"},decls:18,vars:4,consts:[[3,"title","id"],[1,"doc-section-description"],["href","https://www.chartjs.org/docs/latest/general/accessibility.html",1,"text-primary","hover:underline","font-semibold"],[3,"code","hideToggleCode"]],template:function(e,a){1&e&&(t.TgZ(0,"app-developmentsection")(1,"div")(2,"app-docsectiontext",0)(3,"div",1)(4,"h3"),t._uU(5,"Screen Reader"),t.qZA(),t.TgZ(6,"p"),t._uU(7," Chart components internally use "),t.TgZ(8,"i"),t._uU(9,"canvas"),t.qZA(),t._uU(10," element, refer to the "),t.TgZ(11,"a",2),t._uU(12,"Chart.js accessibility"),t.qZA(),t._uU(13," guide for more information. The canvas element can be customized with "),t.TgZ(14,"i"),t._uU(15,"canvasProps"),t.qZA(),t._uU(16," property to define aria roles and properties, in addition any content inside the component is directly passed as a child of the canvas to be able to provide fallback content like a table. "),t.qZA()()(),t._UZ(17,"app-code",3),t.qZA()()),2&e&&(t.xp6(2),t.Q6J("title",a.title)("id",a.id),t.xp6(15),t.Q6J("code",a.code)("hideToggleCode",!0))},dependencies:[i.h,s.c,J.N],encapsulation:2}),o})();var I=d(63408);let M=(()=>{class o{constructor(){this.docs=[{id:"import",label:"Import",component:C},{id:"chartjs",label:"Chart.js",component:f},{id:"basic",label:"Basic",component:Z},{id:"pie",label:"Pie",component:S},{id:"doughnut",label:"Doughnut",component:A},{id:"verticalbar",label:"Vertical Bar",component:k},{id:"horizontalbar",label:"Horizontal Bar",component:P},{id:"stackedbar",label:"Stacked Bar",component:T},{id:"line",label:"Line",component:D},{id:"multiaxis",label:"MultiAxis",component:V},{id:"linestyles",label:"Line Styles",component:v},{id:"polararea",label:"Polar Area",component:U},{id:"Radar",label:"Radar",component:_},{id:"combo",label:"Combo",component:x},{id:"accessibility",label:"Accessibility",component:w}],this.apiDocs=[{id:"properties",label:"Properties",component:B},{id:"methods",label:"Methods",component:q}]}}return o.\u0275fac=function(e){return new(e||o)},o.\u0275cmp=t.Xpm({type:o,selectors:[["ng-component"]],decls:1,vars:2,consts:[["title","Angular Chart Component","header","Charts","description","Chart components are based on Charts.js 3.3.2+, an open source HTML5 based charting library.",3,"docs","apiDocs"]],template:function(e,a){1&e&&t._UZ(0,"app-doc",0),2&e&&t.Q6J("docs",a.docs)("apiDocs",a.apiDocs)},dependencies:[I.x],encapsulation:2}),o})(),F=(()=>{class o{}return o.\u0275fac=function(e){return new(e||o)},o.\u0275mod=t.oAB({type:o}),o.\u0275inj=t.cJS({imports:[y.Bz.forChild([{path:"",component:M}]),y.Bz]}),o})(),O=(()=>{class o{}return o.\u0275fac=function(e){return new(e||o)},o.\u0275mod=t.oAB({type:o}),o.\u0275inj=t.cJS({imports:[c.ez,F,g.S,h]}),o})()}}]);