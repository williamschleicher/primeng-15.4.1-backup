"use strict";(self.webpackChunkprimeng=self.webpackChunkprimeng||[]).push([[167],{46544:(A,_,a)=>{a.d(_,{N:()=>u});var p=a(41571);const Z=["*"];let u=(()=>{class g{}return g.\u0275fac=function(f){return new(f||g)},g.\u0275cmp=p.Xpm({type:g,selectors:[["app-developmentsection"]],ngContentSelectors:Z,decls:4,vars:0,consts:[[1,"flex","align-items-center","line-height-3","bg-primary-600","text-white","p-3","text-lg","border-round","mb-3"],[1,"pi","pi-info-circle","text-lg","text-white","mr-2"]],template:function(f,e){1&f&&(p.F$t(),p.TgZ(0,"div",0),p._UZ(1,"i",1),p._uU(2," Accessibility guide documents the specification of this component based on WCAG guidelines, the implementation is in progress.\n"),p.qZA(),p.Hsn(3))},encapsulation:2}),g})()},50167:(A,_,a)=>{a.r(_),a.d(_,{AutoCompleteDemoModule:()=>H});var p=a(36895),Z=a(10359),u=a(90433),g=a(84369),d=a(79768),f=a(46398),e=a(41571);let U=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[p.ez,Z.Bz,d.a,u.u5,g.V,f.WN,u.UX,g.V]}),o})();var c=a(54802),m=a(96177);let y=(()=>{class o{constructor(){this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedItem" [suggestions]="suggestions" (completeMethod)="search($event)"></p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedItem" [suggestions]="suggestions" (completeMethod)="search($event)"></p-autoComplete>\n</div>',typescript:"\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'autocomplete-basic-demo',\n    templateUrl: './autocomplete-basic-demo.html'\n})\nexport class AutocompleteBasicDemo {\n    items: any[];\n\n    selectedItem: any;\n\n    suggestions: any[];\n\n    search(event) {\n        this.suggestions = [...Array(10).keys()].map(item => event.query + '-' + item);\n    }\n}"}}search(t){this.suggestions=[...Array(10).keys()].map(i=>t.query+"-"+i)}}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["basic-doc"]],inputs:{id:"id",title:"title"},decls:16,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],[3,"ngModel","suggestions","ngModelChange","completeMethod"],["selector","autocomplete-basic-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3," AutoComplete uses "),e.TgZ(4,"i"),e._uU(5,"ngModel"),e.qZA(),e._uU(6," for two-way binding, requires a list of suggestions and a "),e.TgZ(7,"i"),e._uU(8,"completeMethod"),e.qZA(),e._uU(9," to query for the results. The completeMethod gets the query text as "),e.TgZ(10,"i"),e._uU(11,"event.query"),e.qZA(),e._uU(12," property and should update the suggestions with the search results. "),e.qZA()(),e.TgZ(13,"div",1)(14,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedItem=l})("completeMethod",function(l){return i.search(l)}),e.qZA()(),e._UZ(15,"app-code",3),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(13),e.Q6J("ngModel",i.selectedItem)("suggestions",i.suggestions),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc],encapsulation:2}),o})(),q=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["events-doc"]],inputs:{id:"id",title:"title"},decls:96,vars:2,consts:[[3,"title","id"],[1,"doc-tablewrapper"],[1,"doc-table"]],template:function(t,i){1&t&&(e.TgZ(0,"section"),e._UZ(1,"app-docsectiontext",0),e.TgZ(2,"div",1)(3,"table",2)(4,"thead")(5,"tr")(6,"th"),e._uU(7,"Name"),e.qZA(),e.TgZ(8,"th"),e._uU(9,"Parameters"),e.qZA(),e.TgZ(10,"th"),e._uU(11,"Description"),e.qZA()()(),e.TgZ(12,"tbody")(13,"tr")(14,"td"),e._uU(15,"completeMethod"),e.qZA(),e.TgZ(16,"td"),e._uU(17," event.originalEvent: browser event "),e._UZ(18,"br"),e._uU(19," event.query: Value to search with "),e.qZA(),e.TgZ(20,"td"),e._uU(21,"Callback to invoke to search for suggestions."),e.qZA()(),e.TgZ(22,"tr")(23,"td"),e._uU(24,"onFocus"),e.qZA(),e.TgZ(25,"td"),e._uU(26,"event: Browser event"),e.qZA(),e.TgZ(27,"td"),e._uU(28,"Callback to invoke when autocomplete gets focus."),e.qZA()(),e.TgZ(29,"tr")(30,"td"),e._uU(31,"onBlur"),e.qZA(),e.TgZ(32,"td"),e._uU(33,"event: Browser event"),e.qZA(),e.TgZ(34,"td"),e._uU(35,"Callback to invoke when autocomplete loses focus."),e.qZA()(),e.TgZ(36,"tr")(37,"td"),e._uU(38,"onKeyUp"),e.qZA(),e.TgZ(39,"td"),e._uU(40,"event: Browser event"),e.qZA(),e.TgZ(41,"td"),e._uU(42,"Callback to invoke when a user releases a key."),e.qZA()(),e.TgZ(43,"tr")(44,"td"),e._uU(45,"onSelect"),e.qZA(),e.TgZ(46,"td"),e._uU(47,"value: Selected value"),e.qZA(),e.TgZ(48,"td"),e._uU(49,"Callback to invoke when a suggestion is selected."),e.qZA()(),e.TgZ(50,"tr")(51,"td"),e._uU(52,"onUnselect"),e.qZA(),e.TgZ(53,"td"),e._uU(54,"value: Unselected value in multiple mode"),e.qZA(),e.TgZ(55,"td"),e._uU(56,"Callback to invoke when a selected value is removed."),e.qZA()(),e.TgZ(57,"tr")(58,"td"),e._uU(59,"onDropdownClick"),e.qZA(),e.TgZ(60,"td"),e._uU(61," event.originalEvent: browser event "),e._UZ(62,"br"),e._uU(63," event.query: Current value of the input field "),e.qZA(),e.TgZ(64,"td"),e._uU(65,"Callback to invoke when dropdown button is clicked."),e.qZA()(),e.TgZ(66,"tr")(67,"td"),e._uU(68,"onClear"),e.qZA(),e.TgZ(69,"td"),e._uU(70,"-"),e.qZA(),e.TgZ(71,"td"),e._uU(72,"Callback to invoke when input field is cleared."),e.qZA()(),e.TgZ(73,"tr")(74,"td"),e._uU(75,"onShow"),e.qZA(),e.TgZ(76,"td"),e._uU(77,"event: Animation event"),e.qZA(),e.TgZ(78,"td"),e._uU(79,"Callback to invoke when autocomplete overlay gets visible."),e.qZA()(),e.TgZ(80,"tr")(81,"td"),e._uU(82,"onHide"),e.qZA(),e.TgZ(83,"td"),e._uU(84,"-"),e.qZA(),e.TgZ(85,"td"),e._uU(86,"Callback to invoke when autocomplete overlay gets hidden."),e.qZA()(),e.TgZ(87,"tr")(88,"td"),e._uU(89,"onLazyLoad"),e.qZA(),e.TgZ(90,"td"),e._uU(91," event.first: First index of the new data range to be loaded."),e._UZ(92,"br"),e._uU(93," event.last: Last index of the new data range to be loaded. "),e.qZA(),e.TgZ(94,"td"),e._uU(95,"Callback to invoke in lazy mode to load new data."),e.qZA()()()()()()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id))},dependencies:[c.c],encapsulation:2}),o})();var v=a(68476),T=a(20485);function C(o,n){if(1&o&&(e.TgZ(0,"div",5),e._UZ(1,"img",6),e.TgZ(2,"span"),e._uU(3),e.qZA()()),2&o){const t=n.$implicit;e.xp6(1),e.Tol("mr-2 flag flag-"+t.value),e.xp6(2),e.Oqu(t.label)}}let b=(()=>{class o{constructor(t){this.filterService=t,this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedCity" [group]="true" [suggestions]="filteredGroups" \n    (completeMethod)="filterGroupedCity($event)" field="label" [dropdown]="true">\n    <ng-template let-group pTemplate="group">\n        <div class="flex align-items-center">\n            <img src="https://primefaces.org/cdn/primeng/images/demo/flag/flag_placeholder.png" [class]="\'mr-2 flag flag-\' + group.value" style="width: 20px" />\n            <span>{{ group.label }}</span>\n        </div>\n    </ng-template>\n</p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedCity" [group]="true" [suggestions]="filteredGroups" (completeMethod)="filterGroupedCity($event)" field="label" [dropdown]="true">\n        <ng-template let-group pTemplate="group">\n            <div class="flex align-items-center">\n                <img src="https://primefaces.org/cdn/primeng/images/demo/flag/flag_placeholder.png" [class]="\'mr-2 flag flag-\' + group.value" style="width: 20px" />\n                <span>{{ group.label }}</span>\n            </div>\n        </ng-template>\n    </p-autoComplete>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\nimport { FilterService, SelectItemGroup } from 'primeng/api';\n\n@Component({\n    selector: 'autocomplete-grouped-demo',\n    templateUrl: './autocomplete-grouped-demo.html'\n})\nexport class AutocompleteGroupedDemo implements OnInit {\n    selectedCity: any;\n\n    filteredGroups: any[];\n\n    groupedCities: SelectItemGroup[];\n\n    constructor(private filterService: FilterService) { }\n\n    ngOnInit() {\n        this.groupedCities = [\n            {\n                label: 'Germany', value: 'de',\n                items: [\n                    { label: 'Berlin', value: 'Berlin' },\n                    { label: 'Frankfurt', value: 'Frankfurt' },\n                    { label: 'Hamburg', value: 'Hamburg' },\n                    { label: 'Munich', value: 'Munich' }\n                ]\n            },\n            {\n                label: 'USA', value: 'us',\n                items: [\n                    { label: 'Chicago', value: 'Chicago' },\n                    { label: 'Los Angeles', value: 'Los Angeles' },\n                    { label: 'New York', value: 'New York' },\n                    { label: 'San Francisco', value: 'San Francisco' }\n                ]\n            },\n            {\n                label: 'Japan', value: 'jp',\n                items: [\n                    { label: 'Kyoto', value: 'Kyoto' },\n                    { label: 'Osaka', value: 'Osaka' },\n                    { label: 'Tokyo', value: 'Tokyo' },\n                    { label: 'Yokohama', value: 'Yokohama' }\n                ]\n            }\n        ];\n    }\n\n    filterGroupedCity(event) {\n        let query = event.query;\n        let filteredGroups = [];\n\n        for (let optgroup of this.groupedCities) {\n            let filteredSubOptions = this.filterService.filter(optgroup.items, ['label'], query, \"contains\");\n            if (filteredSubOptions && filteredSubOptions.length) {\n                filteredGroups.push({\n                    label: optgroup.label,\n                    value: optgroup.value,\n                    items: filteredSubOptions\n                });\n            }\n        }\n\n        this.filteredGroups = filteredGroups;\n    }\n}"}}ngOnInit(){this.groupedCities=[{label:"Germany",value:"de",items:[{label:"Berlin",value:"Berlin"},{label:"Frankfurt",value:"Frankfurt"},{label:"Hamburg",value:"Hamburg"},{label:"Munich",value:"Munich"}]},{label:"USA",value:"us",items:[{label:"Chicago",value:"Chicago"},{label:"Los Angeles",value:"Los Angeles"},{label:"New York",value:"New York"},{label:"San Francisco",value:"San Francisco"}]},{label:"Japan",value:"jp",items:[{label:"Kyoto",value:"Kyoto"},{label:"Osaka",value:"Osaka"},{label:"Tokyo",value:"Tokyo"},{label:"Yokohama",value:"Yokohama"}]}]}filterGroupedCity(t){let i=t.query,r=[];for(let l of this.groupedCities){let s=this.filterService.filter(l.items,["label"],i,"contains");s&&s.length&&r.push({label:l.label,value:l.value,items:s})}this.filteredGroups=r}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(v.iZ))},o.\u0275cmp=e.Xpm({type:o,selectors:[["grouped-doc"]],inputs:{id:"id",title:"title"},decls:17,vars:7,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["field","label",3,"ngModel","group","suggestions","dropdown","ngModelChange","completeMethod"],["pTemplate","group"],["selector","autocomplete-grouped-demo",3,"code"],[1,"flex","align-items-center"],["src","https://primefaces.org/cdn/primeng/images/demo/flag/flag_placeholder.png",2,"width","20px"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3,"Option grouping is enabled when "),e.TgZ(4,"i"),e._uU(5,"group"),e.qZA(),e._uU(6," property is set to "),e.TgZ(7,"i"),e._uU(8,"true"),e.qZA(),e._uU(9,". "),e.TgZ(10,"i"),e._uU(11,"group"),e.qZA(),e._uU(12," template is available to customize the option groups. All templates get the option instance as the default local template variable."),e.qZA()(),e.TgZ(13,"div",1)(14,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedCity=l})("completeMethod",function(l){return i.filterGroupedCity(l)}),e.YNc(15,C,4,3,"ng-template",3),e.qZA()(),e._UZ(16,"app-code",4),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(13),e.Q6J("ngModel",i.selectedCity)("group",!0)("suggestions",i.filteredGroups)("dropdown",!0),e.xp6(2),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc,T.jx],encapsulation:2}),o})(),w=(()=>{class o{constructor(){this.code={typescript:"import { AutoCompleteModule } from 'primeng/autocomplete';"}}}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["import-doc"]],inputs:{id:"id",title:"title"},decls:3,vars:4,consts:[[3,"title","id"],[3,"code","hideToggleCode"]],template:function(t,i){1&t&&(e.TgZ(0,"section"),e._UZ(1,"app-docsectiontext",0)(2,"app-code",1),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(1),e.Q6J("code",i.code)("hideToggleCode",!0))},dependencies:[d.h,c.c],encapsulation:2}),o})();var h=a(67296);let S=(()=>{class o{constructor(t){this.countryService=t,this.code={basic:'\n<span class="p-fluid">\n    <p-autoComplete [(ngModel)]="selectedCountries" [suggestions]="filteredCountries" \n        (completeMethod)="filterCountry($event)" field="name" [multiple]="true"></p-autoComplete>\n</span>',html:'\n<div class="card">\n    <span class="p-fluid">\n        <p-autoComplete [(ngModel)]="selectedCountries" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name" [multiple]="true"> </p-autoComplete>\n    </span>\n</div>',typescript:"\nimport { Component } from '@angular/core';\nimport { CountryService } from 'src/service/countryservice';\n\n@Component({\n    selector: 'autocomplete-multiple-demo',\n    templateUrl: './autocomplete-multiple-demo.html'\n})\nexport class AutocompleteMultipleDemo {\n    countries: any[];\n\n    selectedCountries: any[];\n\n    filteredCountries: any[];\n\n    constructor(private countryService: CountryService) {}\n\n    ngOnInit() {\n        this.countryService.getCountries().then((countries) => {\n            this.countries = countries;\n        });\n    }\n\n    filterCountry(event) {\n        //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(country);\n            }\n        }\n\n        this.filteredCountries = filtered;\n    }\n}",service:["CountryService"],data:'\n//CountryService\n{\n"name": "Afghanistan",\n"code": "AF"\n}\n...'}}ngOnInit(){this.countryService.getCountries().then(t=>{this.countries=t})}filterCountry(t){let i=[],r=t.query;for(let l=0;l<this.countries.length;l++){let s=this.countries[l];0==s.name.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredCountries=i}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(h.T))},o.\u0275cmp=e.Xpm({type:o,selectors:[["autocomplete-multiple-demo"]],inputs:{id:"id",title:"title"},decls:11,vars:6,consts:[[3,"title","id"],[1,"card"],[1,"p-fluid"],["field","name",3,"ngModel","suggestions","multiple","ngModelChange","completeMethod"],["selector","autocomplete-multiple-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3,"Multiple mode is enabled using "),e.TgZ(4,"i"),e._uU(5,"multiple"),e.qZA(),e._uU(6," property used to select more than one value from the autocomplete. In this case, value reference should be an array."),e.qZA()(),e.TgZ(7,"div",1)(8,"span",2)(9,"p-autoComplete",3),e.NdJ("ngModelChange",function(l){return i.selectedCountries=l})("completeMethod",function(l){return i.filterCountry(l)}),e.qZA()()(),e._UZ(10,"app-code",4),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(8),e.Q6J("ngModel",i.selectedCountries)("suggestions",i.filteredCountries)("multiple",!0),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc],encapsulation:2}),o})();const M=function(){return["/scroller"]};let D=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["props-doc"]],inputs:{id:"id",title:"title"},decls:477,vars:4,consts:[[3,"title","id"],[1,"doc-tablewrapper"],[1,"doc-table"],["href","#",3,"routerLink"]],template:function(t,i){1&t&&(e.TgZ(0,"section"),e._UZ(1,"app-docsectiontext",0),e.TgZ(2,"div",1)(3,"table",2)(4,"thead")(5,"tr")(6,"th"),e._uU(7,"Name"),e.qZA(),e.TgZ(8,"th"),e._uU(9,"Type"),e.qZA(),e.TgZ(10,"th"),e._uU(11,"Default"),e.qZA(),e.TgZ(12,"th"),e._uU(13,"Description"),e.qZA()()(),e.TgZ(14,"tbody")(15,"tr")(16,"td"),e._uU(17,"suggestions"),e.qZA(),e.TgZ(18,"td"),e._uU(19,"array"),e.qZA(),e.TgZ(20,"td"),e._uU(21,"null"),e.qZA(),e.TgZ(22,"td"),e._uU(23,"An array of suggestions to display."),e.qZA()(),e.TgZ(24,"tr")(25,"td"),e._uU(26,"field"),e.qZA(),e.TgZ(27,"td"),e._uU(28,"any"),e.qZA(),e.TgZ(29,"td"),e._uU(30,"null"),e.qZA(),e.TgZ(31,"td"),e._uU(32,"Field of a suggested object to resolve and display."),e.qZA()(),e.TgZ(33,"tr")(34,"td"),e._uU(35,"scrollHeight"),e.qZA(),e.TgZ(36,"td"),e._uU(37,"string"),e.qZA(),e.TgZ(38,"td"),e._uU(39,"200px"),e.qZA(),e.TgZ(40,"td"),e._uU(41,"Maximum height of the suggestions panel."),e.qZA()(),e.TgZ(42,"tr")(43,"td"),e._uU(44,"dropdown"),e.qZA(),e.TgZ(45,"td"),e._uU(46,"boolean"),e.qZA(),e.TgZ(47,"td"),e._uU(48,"false"),e.qZA(),e.TgZ(49,"td"),e._uU(50,"Displays a button next to the input field when enabled."),e.qZA()(),e.TgZ(51,"tr")(52,"td"),e._uU(53,"multiple"),e.qZA(),e.TgZ(54,"td"),e._uU(55,"boolean"),e.qZA(),e.TgZ(56,"td"),e._uU(57,"false"),e.qZA(),e.TgZ(58,"td"),e._uU(59,"Specifies if multiple values can be selected."),e.qZA()(),e.TgZ(60,"tr")(61,"td"),e._uU(62,"dropdownIcon"),e.qZA(),e.TgZ(63,"td"),e._uU(64,"string"),e.qZA(),e.TgZ(65,"td"),e._uU(66,"null"),e.qZA(),e.TgZ(67,"td"),e._uU(68,"Icon class of the dropdown icon."),e.qZA()(),e.TgZ(69,"tr")(70,"td"),e._uU(71,"minLength"),e.qZA(),e.TgZ(72,"td"),e._uU(73,"number"),e.qZA(),e.TgZ(74,"td"),e._uU(75,"1"),e.qZA(),e.TgZ(76,"td"),e._uU(77,"Minimum number of characters to initiate a search."),e.qZA()(),e.TgZ(78,"tr")(79,"td"),e._uU(80,"delay"),e.qZA(),e.TgZ(81,"td"),e._uU(82,"number"),e.qZA(),e.TgZ(83,"td"),e._uU(84,"300"),e.qZA(),e.TgZ(85,"td"),e._uU(86,"Delay between keystrokes to wait before sending a query."),e.qZA()(),e.TgZ(87,"tr")(88,"td"),e._uU(89,"completeOnFocus"),e.qZA(),e.TgZ(90,"td"),e._uU(91,"boolean"),e.qZA(),e.TgZ(92,"td"),e._uU(93,"false"),e.qZA(),e.TgZ(94,"td"),e._uU(95,"Whether to run a query when input receives focus."),e.qZA()(),e.TgZ(96,"tr")(97,"td"),e._uU(98,"style"),e.qZA(),e.TgZ(99,"td"),e._uU(100,"string"),e.qZA(),e.TgZ(101,"td"),e._uU(102,"null"),e.qZA(),e.TgZ(103,"td"),e._uU(104,"Inline style of the component."),e.qZA()(),e.TgZ(105,"tr")(106,"td"),e._uU(107,"inputStyle"),e.qZA(),e.TgZ(108,"td"),e._uU(109,"string"),e.qZA(),e.TgZ(110,"td"),e._uU(111,"null"),e.qZA(),e.TgZ(112,"td"),e._uU(113,"Inline style of the input field."),e.qZA()(),e.TgZ(114,"tr")(115,"td"),e._uU(116,"panelStyle"),e.qZA(),e.TgZ(117,"td"),e._uU(118,"string"),e.qZA(),e.TgZ(119,"td"),e._uU(120,"null"),e.qZA(),e.TgZ(121,"td"),e._uU(122,"Inline style of the overlay panel element."),e.qZA()(),e.TgZ(123,"tr")(124,"td"),e._uU(125,"styleClass"),e.qZA(),e.TgZ(126,"td"),e._uU(127,"string"),e.qZA(),e.TgZ(128,"td"),e._uU(129,"null"),e.qZA(),e.TgZ(130,"td"),e._uU(131,"Style class of the component."),e.qZA()(),e.TgZ(132,"tr")(133,"td"),e._uU(134,"inputStyleClass"),e.qZA(),e.TgZ(135,"td"),e._uU(136,"string"),e.qZA(),e.TgZ(137,"td"),e._uU(138,"null"),e.qZA(),e.TgZ(139,"td"),e._uU(140,"Inline style of the input field."),e.qZA()(),e.TgZ(141,"tr")(142,"td"),e._uU(143,"panelStyleClass"),e.qZA(),e.TgZ(144,"td"),e._uU(145,"string"),e.qZA(),e.TgZ(146,"td"),e._uU(147,"null"),e.qZA(),e.TgZ(148,"td"),e._uU(149,"Style class of the overlay panel element."),e.qZA()(),e.TgZ(150,"tr")(151,"td"),e._uU(152,"inputId"),e.qZA(),e.TgZ(153,"td"),e._uU(154,"string"),e.qZA(),e.TgZ(155,"td"),e._uU(156,"null"),e.qZA(),e.TgZ(157,"td"),e._uU(158,"Identifier of the focus input to match a label defined for the component."),e.qZA()(),e.TgZ(159,"tr")(160,"td"),e._uU(161,"name"),e.qZA(),e.TgZ(162,"td"),e._uU(163,"string"),e.qZA(),e.TgZ(164,"td"),e._uU(165,"null"),e.qZA(),e.TgZ(166,"td"),e._uU(167,"Name of the input element."),e.qZA()(),e.TgZ(168,"tr")(169,"td"),e._uU(170,"optionGroupLabel"),e.qZA(),e.TgZ(171,"td"),e._uU(172,"string"),e.qZA(),e.TgZ(173,"td"),e._uU(174,"label"),e.qZA(),e.TgZ(175,"td"),e._uU(176,"Name of the label field of an option group."),e.qZA()(),e.TgZ(177,"tr")(178,"td"),e._uU(179,"group"),e.qZA(),e.TgZ(180,"td"),e._uU(181,"boolean"),e.qZA(),e.TgZ(182,"td"),e._uU(183,"false"),e.qZA(),e.TgZ(184,"td"),e._uU(185,"Whether to display options as grouped when nested options are provided."),e.qZA()(),e.TgZ(186,"tr")(187,"td"),e._uU(188,"optionGroupChildren"),e.qZA(),e.TgZ(189,"td"),e._uU(190,"string"),e.qZA(),e.TgZ(191,"td"),e._uU(192,"items"),e.qZA(),e.TgZ(193,"td"),e._uU(194,"Name of the options field of an option group."),e.qZA()(),e.TgZ(195,"tr")(196,"td"),e._uU(197,"placeholder"),e.qZA(),e.TgZ(198,"td"),e._uU(199,"string"),e.qZA(),e.TgZ(200,"td"),e._uU(201,"null"),e.qZA(),e.TgZ(202,"td"),e._uU(203,"Hint text for the input field."),e.qZA()(),e.TgZ(204,"tr")(205,"td"),e._uU(206,"readonly"),e.qZA(),e.TgZ(207,"td"),e._uU(208,"boolean"),e.qZA(),e.TgZ(209,"td"),e._uU(210,"false"),e.qZA(),e.TgZ(211,"td"),e._uU(212,"When present, it specifies that the input cannot be typed."),e.qZA()(),e.TgZ(213,"tr")(214,"td"),e._uU(215,"disabled"),e.qZA(),e.TgZ(216,"td"),e._uU(217,"boolean"),e.qZA(),e.TgZ(218,"td"),e._uU(219,"false"),e.qZA(),e.TgZ(220,"td"),e._uU(221,"When present, it specifies that the component should be disabled."),e.qZA()(),e.TgZ(222,"tr")(223,"td"),e._uU(224,"maxlength"),e.qZA(),e.TgZ(225,"td"),e._uU(226,"number"),e.qZA(),e.TgZ(227,"td"),e._uU(228,"null"),e.qZA(),e.TgZ(229,"td"),e._uU(230,"Maximum number of character allows in the input field."),e.qZA()(),e.TgZ(231,"tr")(232,"td"),e._uU(233,"size"),e.qZA(),e.TgZ(234,"td"),e._uU(235,"number"),e.qZA(),e.TgZ(236,"td"),e._uU(237,"null"),e.qZA(),e.TgZ(238,"td"),e._uU(239,"Size of the input field."),e.qZA()(),e.TgZ(240,"tr")(241,"td"),e._uU(242,"appendTo"),e.qZA(),e.TgZ(243,"td"),e._uU(244,"any"),e.qZA(),e.TgZ(245,"td"),e._uU(246,"null"),e.qZA(),e.TgZ(247,"td"),e._uU(248,' Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name). '),e.qZA()(),e.TgZ(249,"tr")(250,"td"),e._uU(251,"tabindex"),e.qZA(),e.TgZ(252,"td"),e._uU(253,"number"),e.qZA(),e.TgZ(254,"td"),e._uU(255,"null"),e.qZA(),e.TgZ(256,"td"),e._uU(257,"Index of the element in tabbing order."),e.qZA()(),e.TgZ(258,"tr")(259,"td"),e._uU(260,"dataKey"),e.qZA(),e.TgZ(261,"td"),e._uU(262,"string"),e.qZA(),e.TgZ(263,"td"),e._uU(264,"null"),e.qZA(),e.TgZ(265,"td"),e._uU(266,"A property to uniquely identify a value in options."),e.qZA()(),e.TgZ(267,"tr")(268,"td"),e._uU(269,"autoHighlight"),e.qZA(),e.TgZ(270,"td"),e._uU(271,"boolean"),e.qZA(),e.TgZ(272,"td"),e._uU(273,"false"),e.qZA(),e.TgZ(274,"td"),e._uU(275,"When enabled, highlights the first item in the list by default."),e.qZA()(),e.TgZ(276,"tr")(277,"td"),e._uU(278,"type"),e.qZA(),e.TgZ(279,"td"),e._uU(280,"string"),e.qZA(),e.TgZ(281,"td"),e._uU(282,"text"),e.qZA(),e.TgZ(283,"td"),e._uU(284,'Type of the input, defaults to "text".'),e.qZA()(),e.TgZ(285,"tr")(286,"td"),e._uU(287,"showEmptyMessage"),e.qZA(),e.TgZ(288,"td"),e._uU(289,"boolean"),e.qZA(),e.TgZ(290,"td"),e._uU(291,"false"),e.qZA(),e.TgZ(292,"td"),e._uU(293,"Whether to show the empty message or not."),e.qZA()(),e.TgZ(294,"tr")(295,"td"),e._uU(296,"emptyMessage"),e.qZA(),e.TgZ(297,"td"),e._uU(298,"string"),e.qZA(),e.TgZ(299,"td"),e._uU(300,"No results found"),e.qZA(),e.TgZ(301,"td"),e._uU(302,"Text to display when there is no data. Defaults to global value in i18n translation configuration."),e.qZA()(),e.TgZ(303,"tr")(304,"td"),e._uU(305,"immutable"),e.qZA(),e.TgZ(306,"td"),e._uU(307,"boolean"),e.qZA(),e.TgZ(308,"td"),e._uU(309,"true"),e.qZA(),e.TgZ(310,"td"),e._uU(311,'Defines how the suggestions should be manipulated. More information is available at "Change Detection" section above.'),e.qZA()(),e.TgZ(312,"tr")(313,"td"),e._uU(314,"required"),e.qZA(),e.TgZ(315,"td"),e._uU(316,"boolean"),e.qZA(),e.TgZ(317,"td"),e._uU(318,"false"),e.qZA(),e.TgZ(319,"td"),e._uU(320,"When present, it specifies that an input field must be filled out before submitting the form."),e.qZA()(),e.TgZ(321,"tr")(322,"td"),e._uU(323,"autofocus"),e.qZA(),e.TgZ(324,"td"),e._uU(325,"boolean"),e.qZA(),e.TgZ(326,"td"),e._uU(327,"false"),e.qZA(),e.TgZ(328,"td"),e._uU(329,"When present, it specifies that the component should automatically get focus on load."),e.qZA()(),e.TgZ(330,"tr")(331,"td"),e._uU(332,"forceSelection"),e.qZA(),e.TgZ(333,"td"),e._uU(334,"boolean"),e.qZA(),e.TgZ(335,"td"),e._uU(336,"false"),e.qZA(),e.TgZ(337,"td"),e._uU(338,"When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions."),e.qZA()(),e.TgZ(339,"tr")(340,"td"),e._uU(341,"dropdownMode"),e.qZA(),e.TgZ(342,"td"),e._uU(343,"string"),e.qZA(),e.TgZ(344,"td"),e._uU(345,"blank"),e.qZA(),e.TgZ(346,"td"),e._uU(347,'Specifies the behavior dropdown button. Default "blank" mode sends an empty string and "current" mode sends the input value.'),e.qZA()(),e.TgZ(348,"tr")(349,"td"),e._uU(350,"baseZIndex"),e.qZA(),e.TgZ(351,"td"),e._uU(352,"number"),e.qZA(),e.TgZ(353,"td"),e._uU(354,"0"),e.qZA(),e.TgZ(355,"td"),e._uU(356,"Base zIndex value to use in layering."),e.qZA()(),e.TgZ(357,"tr")(358,"td"),e._uU(359,"autoZIndex"),e.qZA(),e.TgZ(360,"td"),e._uU(361,"boolean"),e.qZA(),e.TgZ(362,"td"),e._uU(363,"true"),e.qZA(),e.TgZ(364,"td"),e._uU(365,"Whether to automatically manage layering."),e.qZA()(),e.TgZ(366,"tr")(367,"td"),e._uU(368,"showTransitionOptions"),e.qZA(),e.TgZ(369,"td"),e._uU(370,"string"),e.qZA(),e.TgZ(371,"td"),e._uU(372,".12s cubic-bezier(0, 0, 0.2, 1)"),e.qZA(),e.TgZ(373,"td"),e._uU(374,"Transition options of the show animation."),e.qZA()(),e.TgZ(375,"tr")(376,"td"),e._uU(377,"hideTransitionOptions"),e.qZA(),e.TgZ(378,"td"),e._uU(379,"string"),e.qZA(),e.TgZ(380,"td"),e._uU(381,".1s linear"),e.qZA(),e.TgZ(382,"td"),e._uU(383,"Transition options of the hide animation."),e.qZA()(),e.TgZ(384,"tr")(385,"td"),e._uU(386,"ariaLabel"),e.qZA(),e.TgZ(387,"td"),e._uU(388,"string"),e.qZA(),e.TgZ(389,"td"),e._uU(390,"null"),e.qZA(),e.TgZ(391,"td"),e._uU(392,"Defines a string that labels the input for accessibility."),e.qZA()(),e.TgZ(393,"tr")(394,"td"),e._uU(395,"ariaLabelledBy"),e.qZA(),e.TgZ(396,"td"),e._uU(397,"string"),e.qZA(),e.TgZ(398,"td"),e._uU(399,"null"),e.qZA(),e.TgZ(400,"td"),e._uU(401,"Specifies one or more IDs in the DOM that labels the input field."),e.qZA()(),e.TgZ(402,"tr")(403,"td"),e._uU(404,"dropdownAriaLabel"),e.qZA(),e.TgZ(405,"td"),e._uU(406,"string"),e.qZA(),e.TgZ(407,"td"),e._uU(408,"null"),e.qZA(),e.TgZ(409,"td"),e._uU(410,"Defines a string that labels the dropdown button for accessibility."),e.qZA()(),e.TgZ(411,"tr")(412,"td"),e._uU(413,"unique"),e.qZA(),e.TgZ(414,"td"),e._uU(415,"boolean"),e.qZA(),e.TgZ(416,"td"),e._uU(417,"true"),e.qZA(),e.TgZ(418,"td"),e._uU(419,"Ensures uniqueness of selected items on multiple mode."),e.qZA()(),e.TgZ(420,"tr")(421,"td"),e._uU(422,"autocomplete"),e.qZA(),e.TgZ(423,"td"),e._uU(424,"string"),e.qZA(),e.TgZ(425,"td"),e._uU(426,"null"),e.qZA(),e.TgZ(427,"td"),e._uU(428,"Used to define a string that autocomplete attribute the current element."),e.qZA()(),e.TgZ(429,"tr")(430,"td"),e._uU(431,"showClear"),e.qZA(),e.TgZ(432,"td"),e._uU(433,"boolean"),e.qZA(),e.TgZ(434,"td"),e._uU(435,"false"),e.qZA(),e.TgZ(436,"td"),e._uU(437,"When enabled, a clear icon is displayed to clear the value."),e.qZA()(),e.TgZ(438,"tr")(439,"td"),e._uU(440,"virtualScroll"),e.qZA(),e.TgZ(441,"td"),e._uU(442,"boolean"),e.qZA(),e.TgZ(443,"td"),e._uU(444,"false"),e.qZA(),e.TgZ(445,"td"),e._uU(446,"Whether the data should be loaded on demand during scroll."),e.qZA()(),e.TgZ(447,"tr")(448,"td"),e._uU(449,"virtualScrollItemSize"),e.qZA(),e.TgZ(450,"td"),e._uU(451,"number"),e.qZA(),e.TgZ(452,"td"),e._uU(453,"null"),e.qZA(),e.TgZ(454,"td"),e._uU(455,"Height of an item in the list for VirtualScrolling."),e.qZA()(),e.TgZ(456,"tr")(457,"td"),e._uU(458,"virtualScrollOptions"),e.qZA(),e.TgZ(459,"td"),e._uU(460,"ScrollerOptions"),e.qZA(),e.TgZ(461,"td"),e._uU(462,"null"),e.qZA(),e.TgZ(463,"td"),e._uU(464,"Whether to use the scroller feature. The properties of "),e.TgZ(465,"a",3),e._uU(466,"scroller"),e.qZA(),e._uU(467," component can be used like an object in it."),e.qZA()(),e.TgZ(468,"tr")(469,"td"),e._uU(470,"lazy"),e.qZA(),e.TgZ(471,"td"),e._uU(472,"boolean"),e.qZA(),e.TgZ(473,"td"),e._uU(474,"false"),e.qZA(),e.TgZ(475,"td"),e._uU(476,"Defines if data is loaded and interacted with in lazy manner."),e.qZA()()()()()()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(464),e.Q6J("routerLink",e.DdM(3,M)))},dependencies:[Z.rH,c.c],encapsulation:2}),o})(),I=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["style-doc"]],inputs:{id:"id",title:"title"},decls:55,vars:2,consts:[[3,"title","id"],[1,"doc-tablewrapper"],[1,"doc-table"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3,"Following is the list of structural style classes, for theming classes visit "),e.TgZ(4,"i"),e._uU(5,"theming page."),e.qZA()()(),e.TgZ(6,"div",1)(7,"table",2)(8,"thead")(9,"tr")(10,"th"),e._uU(11,"Name"),e.qZA(),e.TgZ(12,"th"),e._uU(13,"Element"),e.qZA()()(),e.TgZ(14,"tbody")(15,"tr")(16,"td"),e._uU(17,"p-autocomplete"),e.qZA(),e.TgZ(18,"td"),e._uU(19,"Container element"),e.qZA()(),e.TgZ(20,"tr")(21,"td"),e._uU(22,"p-autocomplete-panel"),e.qZA(),e.TgZ(23,"td"),e._uU(24,"Overlay panel of suggestions."),e.qZA()(),e.TgZ(25,"tr")(26,"td"),e._uU(27,"p-autocomplete-items"),e.qZA(),e.TgZ(28,"td"),e._uU(29,"List container of suggestions."),e.qZA()(),e.TgZ(30,"tr")(31,"td"),e._uU(32,"p-autocomplete-item"),e.qZA(),e.TgZ(33,"td"),e._uU(34,"List item of a suggestion."),e.qZA()(),e.TgZ(35,"tr")(36,"td"),e._uU(37,"p-autocomplete-token"),e.qZA(),e.TgZ(38,"td"),e._uU(39,"Element of a selected item in multiple mode."),e.qZA()(),e.TgZ(40,"tr")(41,"td"),e._uU(42,"p-autocomplete-token-icon"),e.qZA(),e.TgZ(43,"td"),e._uU(44,"Close icon element of a selected item in multiple mode."),e.qZA()(),e.TgZ(45,"tr")(46,"td"),e._uU(47,"p-autocomplete-token-label"),e.qZA(),e.TgZ(48,"td"),e._uU(49,"Label of a selected item in multiple mode."),e.qZA()(),e.TgZ(50,"tr")(51,"td"),e._uU(52,"p-autocomplete-loader"),e.qZA(),e.TgZ(53,"td"),e._uU(54,"Loader icon."),e.qZA()()()()()()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id))},dependencies:[c.c],encapsulation:2}),o})();function k(o,n){if(1&o&&(e.TgZ(0,"div",5),e._UZ(1,"img",6),e.TgZ(2,"div"),e._uU(3),e.qZA()()),2&o){const t=n.$implicit;e.xp6(1),e.Tol("flag flag-"+t.code.toLowerCase()),e.xp6(2),e.Oqu(t.name)}}let x=(()=>{class o{constructor(t){this.countryService=t,this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedCountryAdvanced" [suggestions]="filteredCountries" \n    (completeMethod)="filterCountry($event)" field="name" [dropdown]="true">\n        <ng-template let-country pTemplate="item">\n            <div class="flex align-items-center gap-2">\n                <img src="https://primefaces.org/cdn/primeng/images/demo/flag/flag_placeholder.png" [class]="\'flag flag-\' + country.code.toLowerCase()" style="width: 18px"/>\n                <div>{{ country.name }}</div>\n            </div>\n        </ng-template>\n</p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedCountryAdvanced" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name" [dropdown]="true">\n        <ng-template let-country pTemplate="item">\n            <div class="flex align-items-center gap-2">\n                <img src="https://primefaces.org/cdn/primeng/images/demo/flag/flag_placeholder.png" [class]="\'flag flag-\' + country.code.toLowerCase()" style="width: 18px"/>\n                <div>{{ country.name }}</div>\n            </div>\n        </ng-template>\n    </p-autoComplete>\n</div>',typescript:"\nimport { Component } from '@angular/core';\nimport { SelectItemGroup } from 'primeng/api';\nimport { CountryService } from 'src/service/countryservice';\n\n@Component({\n    selector: 'autocomplete-template-demo',\n    templateUrl: './autocomplete-template-demo.html',\n    styleUrls: ['./autocomplete-template-demo.scss']\n})\nexport class AutocompleteTemplateDemo {\n    countries: any[];\n\n    items: any[];\n\n    groupedCities: SelectItemGroup[];\n\n    selectedCountryAdvanced: any[];\n\n    filteredCountries: any[];\n\n    constructor(private countryService: CountryService) {}\n\n    ngOnInit() {\n        this.countryService.getCountries().then((countries) => {\n            this.countries = countries;\n        });\n\n        this.groupedCities = [\n            {\n                label: 'Germany',\n                value: 'de',\n                items: [\n                    { label: 'Berlin', value: 'Berlin' },\n                    { label: 'Frankfurt', value: 'Frankfurt' },\n                    { label: 'Hamburg', value: 'Hamburg' },\n                    { label: 'Munich', value: 'Munich' }\n                ]\n            },\n            {\n                label: 'USA',\n                value: 'us',\n                items: [\n                    { label: 'Chicago', value: 'Chicago' },\n                    { label: 'Los Angeles', value: 'Los Angeles' },\n                    { label: 'New York', value: 'New York' },\n                    { label: 'San Francisco', value: 'San Francisco' }\n                ]\n            },\n            {\n                label: 'Japan',\n                value: 'jp',\n                items: [\n                    { label: 'Kyoto', value: 'Kyoto' },\n                    { label: 'Osaka', value: 'Osaka' },\n                    { label: 'Tokyo', value: 'Tokyo' },\n                    { label: 'Yokohama', value: 'Yokohama' }\n                ]\n            }\n        ];\n\n        this.items = [];\n        for (let i = 0; i < 10000; i++) {\n            this.items.push({ label: 'Item ' + i, value: 'Item ' + i });\n        }\n    }\n\n    filterCountry(event) {\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(country);\n            }\n        }\n\n        this.filteredCountries = filtered;\n    }\n}",service:["CountryService"],data:'\n//CountryService\n{\n    "name": "Afghanistan",\n    "code": "AF"\n}\n...'}}ngOnInit(){this.countryService.getCountries().then(t=>{this.countries=t}),this.groupedCities=[{label:"Germany",value:"de",items:[{label:"Berlin",value:"Berlin"},{label:"Frankfurt",value:"Frankfurt"},{label:"Hamburg",value:"Hamburg"},{label:"Munich",value:"Munich"}]},{label:"USA",value:"us",items:[{label:"Chicago",value:"Chicago"},{label:"Los Angeles",value:"Los Angeles"},{label:"New York",value:"New York"},{label:"San Francisco",value:"San Francisco"}]},{label:"Japan",value:"jp",items:[{label:"Kyoto",value:"Kyoto"},{label:"Osaka",value:"Osaka"},{label:"Tokyo",value:"Tokyo"},{label:"Yokohama",value:"Yokohama"}]}],this.items=[];for(let t=0;t<1e4;t++)this.items.push({label:"Item "+t,value:"Item "+t})}filterCountry(t){let i=[],r=t.query;for(let l=0;l<this.countries.length;l++){let s=this.countries[l];0==s.name.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredCountries=i}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(h.T))},o.\u0275cmp=e.Xpm({type:o,selectors:[["autocomplete-template-demo"]],inputs:{id:"id",title:"title"},decls:10,vars:6,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["field","name",3,"ngModel","suggestions","dropdown","ngModelChange","completeMethod"],["pTemplate","item"],["selector","autocomplete-template-demo",3,"code"],[1,"flex","align-items-center","gap-2"],["src","https://primefaces.org/cdn/primeng/images/demo/flag/flag_placeholder.png",2,"width","18px"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p")(3,"i"),e._uU(4,"item"),e.qZA(),e._uU(5," template allows displaying custom content inside the suggestions panel. The local ng-template variable passed to the ng-template is an object in the suggestions array."),e.qZA()(),e.TgZ(6,"div",1)(7,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedCountryAdvanced=l})("completeMethod",function(l){return i.filterCountry(l)}),e.YNc(8,k,4,3,"ng-template",3),e.qZA()(),e._UZ(9,"app-code",4),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(6),e.Q6J("ngModel",i.selectedCountryAdvanced)("suggestions",i.filteredCountries)("dropdown",!0),e.xp6(2),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc,T.jx],encapsulation:2}),o})(),O=(()=>{class o{constructor(){this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedItem" [virtualScroll]="true" [suggestions]="filteredItems" [virtualScrollItemSize]="34" (completeMethod)="filterItems($event)" field="label" [dropdown]="true"> </p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedItem" [virtualScroll]="true" [suggestions]="filteredItems" [virtualScrollItemSize]="34" (completeMethod)="filterItems($event)" field="label" [dropdown]="true"> </p-autoComplete>\n</div>',typescript:"\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'autocomplete-virtual-scroll-demo',\n    templateUrl: './autocomplete-virtual-scroll-demo.html'\n})\nexport class AutocompleteVirtualScrollDemo {\n    selectedItem: any;\n\n    filteredItems: any[];\n\n    items: any[];\n\n    filterItems(event) {\n        //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.items.length; i++) {\n            let item = this.items[i];\n            if (item.label.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(item);\n            }\n        }\n\n        this.filteredItems = filtered;\n    }\n\n    ngOnInit() {\n        this.items = [];\n        for (let i = 0; i < 10000; i++) {\n            this.items.push({ label: 'Item ' + i, value: 'Item ' + i });\n        }\n    }\n}"}}filterItems(t){let i=[],r=t.query;for(let l=0;l<this.items.length;l++){let s=this.items[l];0==s.label.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredItems=i}ngOnInit(){this.items=[];for(let t=0;t<1e4;t++)this.items.push({label:"Item "+t,value:"Item "+t})}}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["autocomplete-virtual-scroll-demo"]],inputs:{id:"id",title:"title"},decls:16,vars:8,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["field","label",3,"ngModel","virtualScroll","suggestions","virtualScrollItemSize","dropdown","ngModelChange","completeMethod"],["selector","autocomplete-virtual-scroll-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3," Virtual scrolling is an efficient way of rendering the options by displaying a small subset of data in the viewport at any time. When dealing with huge number of options, it is suggested to enable virtual scrolling to avoid performance issues. Usage is simple as setting "),e.TgZ(4,"i"),e._uU(5,"virtualScroll"),e.qZA(),e._uU(6," property to "),e.TgZ(7,"i"),e._uU(8,"true"),e.qZA(),e._uU(9," and defining "),e.TgZ(10,"i"),e._uU(11,"virtualScrollItemSize"),e.qZA(),e._uU(12," to specify the height of an item. "),e.qZA()(),e.TgZ(13,"div",1)(14,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedItem=l})("completeMethod",function(l){return i.filterItems(l)}),e.qZA()(),e._UZ(15,"app-code",3),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(13),e.Q6J("ngModel",i.selectedItem)("virtualScroll",!0)("suggestions",i.filteredItems)("virtualScrollItemSize",34)("dropdown",!0),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc],encapsulation:2}),o})();var F=a(46544);let J=(()=>{class o{constructor(){this.code={basic:'<label for="ac1">Username</label>\n<p-autoComplete inputId="ac1"></p-autoComplete>\n\n<span id="ac2">Email</span>\n<p-autoComplete aria-labelledby="ac2"></p-autoComplete>\n\n<p-autoComplete aria-label="City"></p-autoComplete>'}}}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["accessibility-doc"]],inputs:{id:"id",title:"title"},decls:168,vars:6,consts:[[3,"title","id"],[3,"code","hideToggleCode","hideCodeSandbox","hideStackBlitz"],[1,"doc-tablewrapper"],[1,"doc-table"]],template:function(t,i){1&t&&(e.TgZ(0,"app-developmentsection")(1,"div")(2,"app-docsectiontext",0)(3,"h3"),e._uU(4,"Screen Reader"),e.qZA(),e.TgZ(5,"p"),e._uU(6," Value to describe the component can either be provided via "),e.TgZ(7,"i"),e._uU(8,"label"),e.qZA(),e._uU(9," tag combined with "),e.TgZ(10,"i"),e._uU(11,"inputId"),e.qZA(),e._uU(12," prop or using "),e.TgZ(13,"i"),e._uU(14,"aria-labelledby"),e.qZA(),e._uU(15,", "),e.TgZ(16,"i"),e._uU(17,"aria-label"),e.qZA(),e._uU(18," props. The input element has "),e.TgZ(19,"i"),e._uU(20,"combobox"),e.qZA(),e._uU(21," role in addition to "),e.TgZ(22,"i"),e._uU(23,"aria-autocomplete"),e.qZA(),e._uU(24,", "),e.TgZ(25,"i"),e._uU(26,"aria-haspopup"),e.qZA(),e._uU(27," and "),e.TgZ(28,"i"),e._uU(29,"aria-expanded"),e.qZA(),e._uU(30," attributes. The relation between the input and the popup is created with "),e.TgZ(31,"i"),e._uU(32,"aria-controls"),e.qZA(),e._uU(33," and "),e.TgZ(34,"i"),e._uU(35,"aria-activedescendant"),e.qZA(),e._uU(36," attribute is used to instruct screen reader which option to read during keyboard navigation within the popup list. "),e.qZA(),e.TgZ(37,"p"),e._uU(38,"In multiple mode, chip list uses "),e.TgZ(39,"i"),e._uU(40,"listbox"),e.qZA(),e._uU(41," role whereas each chip has the "),e.TgZ(42,"i"),e._uU(43,"option"),e.qZA(),e._uU(44," role with "),e.TgZ(45,"i"),e._uU(46,"aria-label"),e.qZA(),e._uU(47," set to the label of the chip."),e.qZA(),e.TgZ(48,"p"),e._uU(49," The popup list has an id that refers to the "),e.TgZ(50,"i"),e._uU(51,"aria-controls"),e.qZA(),e._uU(52," attribute of the input element and uses "),e.TgZ(53,"i"),e._uU(54,"listbox"),e.qZA(),e._uU(55," as the role. Each list item has "),e.TgZ(56,"i"),e._uU(57,"option"),e.qZA(),e._uU(58," role and an id to match the "),e.TgZ(59,"i"),e._uU(60,"aria-activedescendant"),e.qZA(),e._uU(61," of the input element. "),e.qZA()(),e._UZ(62,"app-code",1),e.TgZ(63,"h3"),e._uU(64,"Keyboard Support"),e.qZA(),e.TgZ(65,"div",2)(66,"table",3)(67,"thead")(68,"tr")(69,"th"),e._uU(70,"Key"),e.qZA(),e.TgZ(71,"th"),e._uU(72,"Function"),e.qZA()()(),e.TgZ(73,"tbody")(74,"tr")(75,"td")(76,"i"),e._uU(77,"tab"),e.qZA()(),e.TgZ(78,"td"),e._uU(79,"Moves focus to the input element when popup is not visible. If the popup is open and an item is highlighted then popup gets closed, item gets selected and focus moves to the next focusable element."),e.qZA()(),e.TgZ(80,"tr")(81,"td")(82,"i"),e._uU(83,"up arrow"),e.qZA()(),e.TgZ(84,"td"),e._uU(85,"Highlights the previous item if popup is visible."),e.qZA()(),e.TgZ(86,"tr")(87,"td")(88,"i"),e._uU(89,"down arrow"),e.qZA()(),e.TgZ(90,"td"),e._uU(91,"Highlights the next item if popup is visible."),e.qZA()(),e.TgZ(92,"tr")(93,"td")(94,"i"),e._uU(95,"enter"),e.qZA()(),e.TgZ(96,"td"),e._uU(97,"Selects the highlighted item and closes the popup if popup is visible."),e.qZA()(),e.TgZ(98,"tr")(99,"td")(100,"i"),e._uU(101,"home"),e.qZA()(),e.TgZ(102,"td"),e._uU(103,"Highlights the first item if popup is visible."),e.qZA()(),e.TgZ(104,"tr")(105,"td")(106,"i"),e._uU(107,"end"),e.qZA()(),e.TgZ(108,"td"),e._uU(109,"Highlights the last item if popup is visible."),e.qZA()(),e.TgZ(110,"tr")(111,"td")(112,"i"),e._uU(113,"escape"),e.qZA()(),e.TgZ(114,"td"),e._uU(115,"Hides the popup."),e.qZA()()()()(),e.TgZ(116,"h3"),e._uU(117,"Chips Input Keyboard Support"),e.qZA(),e.TgZ(118,"div",2)(119,"table",3)(120,"thead")(121,"tr")(122,"th"),e._uU(123,"Key"),e.qZA(),e.TgZ(124,"th"),e._uU(125,"Function"),e.qZA()()(),e.TgZ(126,"tbody")(127,"tr")(128,"td")(129,"i"),e._uU(130,"backspace"),e.qZA()(),e.TgZ(131,"td"),e._uU(132,"Deletes the previous chip if the input field is empty."),e.qZA()(),e.TgZ(133,"tr")(134,"td")(135,"i"),e._uU(136,"left arrow"),e.qZA()(),e.TgZ(137,"td"),e._uU(138,"Moves focus to the previous chip if available and input field is empty."),e.qZA()()()()(),e.TgZ(139,"h3"),e._uU(140,"Chip Keyboard Support"),e.qZA(),e.TgZ(141,"div",2)(142,"table",3)(143,"thead")(144,"tr")(145,"th"),e._uU(146,"Key"),e.qZA(),e.TgZ(147,"th"),e._uU(148,"Function"),e.qZA()()(),e.TgZ(149,"tbody")(150,"tr")(151,"td")(152,"i"),e._uU(153,"left arrow"),e.qZA()(),e.TgZ(154,"td"),e._uU(155,"Moves focus to the previous chip if available."),e.qZA()(),e.TgZ(156,"tr")(157,"td")(158,"i"),e._uU(159,"right arrow"),e.qZA()(),e.TgZ(160,"td"),e._uU(161,"Moves focus to the next chip, if there is none then input field receives the focus."),e.qZA()(),e.TgZ(162,"tr")(163,"td")(164,"i"),e._uU(165,"backspace"),e.qZA()(),e.TgZ(166,"td"),e._uU(167,"Deletes the chips and adds focus to the input field."),e.qZA()()()()()()()),2&t&&(e.xp6(2),e.Q6J("title",i.title)("id",i.id),e.xp6(60),e.Q6J("code",i.code)("hideToggleCode",!0)("hideCodeSandbox",!0)("hideStackBlitz",!0))},dependencies:[d.h,c.c,F.N],encapsulation:2}),o})(),L=(()=>{class o{constructor(t,i){this.platformId=t,this.document=i,this.window=this.document.defaultView}isBrowser(){return(0,p.NF)(this.platformId)&&null!=this.window}}return o.\u0275fac=function(t){return new(t||o)(e.LFG(e.Lbi),e.LFG(p.K0))},o.\u0275prov=e.Yz7({token:o,factory:o.\u0275fac,providedIn:"root"}),o})(),G=(()=>{class o{constructor(t,i){this.countryService=t,this.PlatformService=i,this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedCountry" [dropdown]="true" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedCountry" [dropdown]="true" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\nimport { CountryService } from 'src/service/countryservice';\n\n@Component({\n    selector: 'autocomplete-dropdown-demo',\n    templateUrl: './autocomplete-dropdown-demo.html'\n})\nexport class AutocompleteDropdownDemo implements OnInit {\n    countries: any[];\n\n    selectedCountry: any;\n\n    filteredCountries: any[];\n\n    constructor(private countryService: CountryService) {}\n\n    ngOnInit() {\n        this.countryService.getCountries().then((countries) => {\n            this.countries = countries;\n        });\n    }\n\n    filterCountry(event) {\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(country);\n            }\n        }\n\n        this.filteredCountries = filtered;\n    }\n}",service:["CountryService"],data:'\n//CountryService\n{\n    "name": "Afghanistan",\n    "code": "AF"\n}\n...'}}ngOnInit(){this.PlatformService.isBrowser()&&this.countryService.getCountries().then(t=>{this.countries=t})}filterCountry(t){let i=[],r=t.query;for(let l=0;l<this.countries.length;l++){let s=this.countries[l];0==s.name.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredCountries=i}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(h.T),e.Y36(L))},o.\u0275cmp=e.Xpm({type:o,selectors:[["dropdown-doc"]],inputs:{id:"id",title:"title"},decls:25,vars:6,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["field","name",3,"ngModel","dropdown","suggestions","ngModelChange","completeMethod"],["selector","autocomplete-dropdown-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3," Enabling "),e.TgZ(4,"i"),e._uU(5,"dropdown"),e.qZA(),e._uU(6," property displays a button next to the input field where click behavior of the button is defined using "),e.TgZ(7,"i"),e._uU(8,"dropdownMode"),e.qZA(),e._uU(9," property that takes "),e.TgZ(10,"strong"),e._uU(11,"blank"),e.qZA(),e._uU(12," or "),e.TgZ(13,"strong"),e._uU(14,"current"),e.qZA(),e._uU(15," as possible values. "),e.TgZ(16,"i"),e._uU(17,"blank"),e.qZA(),e._uU(18," is the default mode to send a query with an empty string whereas "),e.TgZ(19,"i"),e._uU(20,"current"),e.qZA(),e._uU(21," setting sends a query with the current value of the input. "),e.qZA()(),e.TgZ(22,"div",1)(23,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedCountry=l})("completeMethod",function(l){return i.filterCountry(l)}),e.qZA()(),e._UZ(24,"app-code",3),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(22),e.Q6J("ngModel",i.selectedCountry)("dropdown",!0)("suggestions",i.filteredCountries),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc],encapsulation:2}),o})(),Q=(()=>{class o{constructor(t){this.countryService=t,this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedCountry" [forceSelection]="true" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedCountry" [forceSelection]="true" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\nimport { CountryService } from 'src/service/countryservice';\n\n@Component({\n    selector: 'autocomplete-force-selection-demo',\n    templateUrl: './autocomplete-force-selection-demo.html'\n})\nexport class ForceSelectionDoc implements OnInit {\n    countries: any[];\n\n    selectedCountry: any;\n\n    filteredCountries: any[];\n\n    constructor(private countryService: CountryService) {}\n\n    ngOnInit() {\n        this.countryService.getCountries().then((countries) => {\n            this.countries = countries;\n        });\n    }\n\n    filterCountry(event) {\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(country);\n            }\n        }\n\n        this.filteredCountries = filtered;\n    }\n}",service:["CountryService"],data:'\n//CountryService\n{\n    "name": "Afghanistan",\n    "code": "AF"\n}\n...'}}ngOnInit(){this.countryService.getCountries().then(t=>{this.countries=t})}filterCountry(t){let i=[],r=t.query;for(let l=0;l<this.countries.length;l++){let s=this.countries[l];0==s.name.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredCountries=i}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(h.T))},o.\u0275cmp=e.Xpm({type:o,selectors:[["force-selection-doc"]],inputs:{id:"id",title:"title"},decls:7,vars:6,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["field","name",3,"ngModel","forceSelection","suggestions","ngModelChange","completeMethod"],["selector","autocomplete-force-selection-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3,"ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions."),e.qZA()(),e.TgZ(4,"div",1)(5,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedCountry=l})("completeMethod",function(l){return i.filterCountry(l)}),e.qZA()(),e._UZ(6,"app-code",3),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(4),e.Q6J("ngModel",i.selectedCountry)("forceSelection",!0)("suggestions",i.filteredCountries),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc],encapsulation:2}),o})(),j=(()=>{class o{constructor(t){this.countryService=t,this.code={basic:'\n<p-autoComplete [(ngModel)]="selectedCountry" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>',html:'\n<div class="card flex justify-content-center">\n    <p-autoComplete [(ngModel)]="selectedCountry" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\nimport { CountryService } from 'src/service/countryservice';\n\n@Component({\n    selector: 'autocomplete-objects-demo',\n    templateUrl: './autocomplete-objects-demo.html'\n})\nexport class AutocompleteObjectsDemo implements OnInit {\n    countries: any[];\n\n    selectedCountry: any;\n\n    filteredCountries: any[];\n\n    constructor(private countryService: CountryService) {}\n\n    ngOnInit() {\n        this.countryService.getCountries().then((countries) => {\n            this.countries = countries;\n        });\n    }\n\n    filterCountry(event) {\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(country);\n            }\n        }\n\n        this.filteredCountries = filtered;\n    }\n}",service:["CountryService"],data:'\n//CountryService\n{\n    "name": "Afghanistan",\n    "code": "AF"\n}\n...'}}ngOnInit(){this.countryService.getCountries().then(t=>{this.countries=t})}filterCountry(t){let i=[],r=t.query;for(let l=0;l<this.countries.length;l++){let s=this.countries[l];0==s.name.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredCountries=i}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(h.T))},o.\u0275cmp=e.Xpm({type:o,selectors:[["autocomplete-objects-demo"]],inputs:{id:"id",title:"title"},decls:13,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],["field","name",3,"ngModel","suggestions","ngModelChange","completeMethod"],["selector","autocomplete-objects-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3," AutoComplete can also work with objects using the "),e.TgZ(4,"i"),e._uU(5,"field"),e.qZA(),e._uU(6," property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as "),e.TgZ(7,"i"),e._uU(8,'{name: "United States", code:"USA"}'),e.qZA(),e._uU(9,". "),e.qZA()(),e.TgZ(10,"div",1)(11,"p-autoComplete",2),e.NdJ("ngModelChange",function(l){return i.selectedCountry=l})("completeMethod",function(l){return i.filterCountry(l)}),e.qZA()(),e._UZ(12,"app-code",3),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(10),e.Q6J("ngModel",i.selectedCountry)("suggestions",i.filteredCountries),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u.JJ,u.On,c.c,m.Qc],encapsulation:2}),o})(),N=(()=>{class o{constructor(t){this.countryService=t,this.code={basic:'\n<form [formGroup]="formGroup">\n    <p-autoComplete formControlName="selectedCountry" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>\n</form>',html:'\n<div class="card flex justify-content-center">\n    <form [formGroup]="formGroup">\n        <p-autoComplete formControlName="selectedCountry" [suggestions]="filteredCountries" (completeMethod)="filterCountry($event)" field="name"></p-autoComplete>\n    </form>\n</div>',typescript:"\nimport { Component, OnInit } from '@angular/core';\nimport { CountryService } from '../../service/countryservice';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'autocomplete-reactive-forms-demo',\n    templateUrl: './autocomplete-reactive-forms-demo.html'\n})\nexport class AutocompleteReactiveFormsDemo implements OnInit {\n    countries: any[];\n\n    formGroup: FormGroup;\n\n    filteredCountries: any[];\n\n    constructor(private countryService: CountryService) {}\n\n    ngOnInit() {\n        this.countryService.getCountries().then((countries) => {\n            this.countries = countries;\n        });\n\n        this.formGroup = new FormGroup({\n            selectedCountry: new FormControl<object | null>(null)\n        });\n    }\n\n    filterCountry(event) {\n        let filtered: any[] = [];\n        let query = event.query;\n\n        for (let i = 0; i < this.countries.length; i++) {\n            let country = this.countries[i];\n            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n                filtered.push(country);\n            }\n        }\n\n        this.filteredCountries = filtered;\n    }\n}",service:["CountryService"],data:'\n//CountryService\n{\n    "name": "Afghanistan",\n    "code": "AF"\n}\n...'}}ngOnInit(){this.countryService.getCountries().then(t=>{this.countries=t}),this.formGroup=new u.cw({selectedCountry:new u.NI(null)})}filterCountry(t){let i=[],r=t.query;for(let l=0;l<this.countries.length;l++){let s=this.countries[l];0==s.name.toLowerCase().indexOf(r.toLowerCase())&&i.push(s)}this.filteredCountries=i}}return o.\u0275fac=function(t){return new(t||o)(e.Y36(h.T))},o.\u0275cmp=e.Xpm({type:o,selectors:[["reactive-forms-doc"]],inputs:{id:"id",title:"title"},decls:11,vars:5,consts:[[3,"title","id"],[1,"card","flex","justify-content-center"],[3,"formGroup"],["formControlName","selectedCountry","field","name",3,"suggestions","completeMethod"],["selector","autocomplete-reactive-forms-demo",3,"code"]],template:function(t,i){1&t&&(e.TgZ(0,"section")(1,"app-docsectiontext",0)(2,"p"),e._uU(3,"AutoComplete can also be used with reactive forms. In this case, the "),e.TgZ(4,"i"),e._uU(5,"formControlName"),e.qZA(),e._uU(6," property is used to bind the component to a form control."),e.qZA()(),e.TgZ(7,"div",1)(8,"form",2)(9,"p-autoComplete",3),e.NdJ("completeMethod",function(l){return i.filterCountry(l)}),e.qZA()()(),e._UZ(10,"app-code",4),e.qZA()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id),e.xp6(7),e.Q6J("formGroup",i.formGroup),e.xp6(1),e.Q6J("suggestions",i.filteredCountries),e.xp6(1),e.Q6J("code",i.code))},dependencies:[d.h,u._Y,u.JJ,u.JL,c.c,m.Qc,u.sg,u.u],encapsulation:2}),o})(),B=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["templates-doc"]],inputs:{id:"id",title:"title"},decls:66,vars:2,consts:[[3,"title","id"],[1,"doc-tablewrapper"],[1,"doc-table"]],template:function(t,i){1&t&&(e.TgZ(0,"section"),e._UZ(1,"app-docsectiontext",0),e.TgZ(2,"div",1)(3,"table",2)(4,"thead")(5,"tr")(6,"th"),e._uU(7,"Name"),e.qZA(),e.TgZ(8,"th"),e._uU(9,"Parameters"),e.qZA()()(),e.TgZ(10,"tbody")(11,"tr")(12,"td"),e._uU(13,"item"),e.qZA(),e.TgZ(14,"td"),e._uU(15,"-"),e.qZA()(),e.TgZ(16,"tr")(17,"td"),e._uU(18,"group"),e.qZA(),e.TgZ(19,"td"),e._uU(20,"$implicit: optgroup"),e.qZA()(),e.TgZ(21,"tr")(22,"td"),e._uU(23,"selectedItem"),e.qZA(),e.TgZ(24,"td"),e._uU(25,"$implicit: value"),e.qZA()(),e.TgZ(26,"tr")(27,"td"),e._uU(28,"header"),e.qZA(),e.TgZ(29,"td"),e._uU(30,"-"),e.qZA()(),e.TgZ(31,"tr")(32,"td"),e._uU(33,"empty"),e.qZA(),e.TgZ(34,"td"),e._uU(35,"-"),e.qZA()(),e.TgZ(36,"tr")(37,"td"),e._uU(38,"footer"),e.qZA(),e.TgZ(39,"td"),e._uU(40,"-"),e.qZA()(),e.TgZ(41,"tr")(42,"td"),e._uU(43,"loader"),e.qZA(),e.TgZ(44,"td"),e._uU(45,"-"),e.qZA()(),e.TgZ(46,"tr")(47,"td"),e._uU(48,"removetokenicon"),e.qZA(),e.TgZ(49,"td"),e._uU(50,"-"),e.qZA()(),e.TgZ(51,"tr")(52,"td"),e._uU(53,"loadingicon"),e.qZA(),e.TgZ(54,"td"),e._uU(55,"-"),e.qZA()(),e.TgZ(56,"tr")(57,"td"),e._uU(58,"clearicon"),e.qZA(),e.TgZ(59,"td"),e._uU(60,"-"),e.qZA()(),e.TgZ(61,"tr")(62,"td"),e._uU(63,"dropdownicon"),e.qZA(),e.TgZ(64,"td"),e._uU(65,"-"),e.qZA()()()()()()),2&t&&(e.xp6(1),e.Q6J("title",i.title)("id",i.id))},dependencies:[c.c],encapsulation:2}),o})();var Y=a(63408);let z=(()=>{class o{constructor(){this.docs=[{id:"import",label:"Import",component:w},{id:"basic",label:"Basic",component:y},{id:"reactive-forms",label:"Reactive Forms",component:N},{id:"dropdown",label:"Dropdown",component:G},{id:"objects",label:"Objects",component:j},{id:"template",label:"Template",component:x},{id:"grouped",label:"Grouped",component:b},{id:"forceselection",label:"Force Selection",component:Q},{id:"virtualscroll",label:"Virtual Scroll",component:O},{id:"multiple",label:"Multiple",component:S},{id:"style",label:"Style",component:I},{id:"accessibility",label:"Accessibility",component:J}],this.apiDocs=[{id:"properties",label:"Properties",component:D},{id:"events",label:"Events",component:q},{id:"templates",label:"Templates",component:B}]}}return o.\u0275fac=function(t){return new(t||o)},o.\u0275cmp=e.Xpm({type:o,selectors:[["ng-component"]],decls:1,vars:2,consts:[["title","Angular AutoComplete Component","header","AutoComplete","description","AutoComplete is an input component that provides real-time suggestions when being typed.",3,"docs","apiDocs"]],template:function(t,i){1&t&&e._UZ(0,"app-doc",0),2&t&&e.Q6J("docs",i.docs)("apiDocs",i.apiDocs)},dependencies:[Y.x],encapsulation:2}),o})(),$=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[Z.Bz.forChild([{path:"",component:z}]),Z.Bz]}),o})(),H=(()=>{class o{}return o.\u0275fac=function(t){return new(t||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[p.ez,$,U]}),o})()}}]);